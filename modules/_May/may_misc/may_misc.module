<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Constants for ratins titles, etc.
 */
module_load_include('inc', 'may_misc', 'inc/constants');


/**
 * Implements hook_menu().
 */
function may_misc_menu() {
 /*
  $items['securimage_show'] = array(
    'title' => 'Securimage',
    'page callback' => 'may_misc_securimage_show_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  $items['check_ctcaptcha'] = array(
    'title' => 'Check CT Captcha',
    'page callback' => 'may_misc_checkCtCaptcha_ajax',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
*/
  
  
  $items['cc'] = array(
    'title' => 'Flush the cache and redirect to the Home page',
    'page callback' => 'may_misc_flushCache',
    //'access arguments' => array('access content'),
    'access callback' => 'may_misc_userIsAdmin',
    'type' => MENU_CALLBACK,
  );
  
    
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'may_misc_testPage',
    //'access arguments' => array('administer content'),
    'access arguments' => array('administer taxonomy'), 
    'type' => MENU_CALLBACK,
  );
 
  return $items;
}


/**
 * Test page function for url /test. 
 */
function may_misc_testPage() {
  $out = '<div>Start test...</div>';

  
    $access_token = 'xxx';
    $cmd = 'on';
    $query = urlencode('cmd=' . $cmd);
    
    $url = 'http://94.180.80.84?'
            . $query
            . '&format=json'
            . '&access_token=' . $access_token;

    
    //$result = json_decode("{'status':true,'cap':null}");
    //$result = json_decode('{"status":true,"cap":null}',true);
//    $result = json_decode('{"status":true,"cap":null}');
    
    //dpm($result);
    
    
    if($result = may_misc_curlGET($url)) {
      
      //dpm($result);
      //$out .= 'xxx ' . $result;
      $result = str_replace(array('"', "'"), array("'", '"'), $result);
      
      $data = json_decode($result,true);
      if (is_array($data)) {
        $out .= '<style>
                  .button {width: 100px; height: 100px;}
                  .on {background: green;}
                  .off {background: red;}
                </style>';
        $led1 = $data['led1'];
        $led1_state = $led1 ? 'on' : 'off';
        $led1_action = $led1 ? 'off' : 'on';
        $out .= '<a href="?led1=' . $led1_action . '"><div class="button ' . $led1_state . '"></div></a>';
      }
    }
    
  dpm($result);
  
  $out .= 'yyy' . $result;
  
  return $out . '<br>End of Test';
}



/**
 * Implements hook_flush_caches(). 
 */
function may_misc_flush_caches() {
  
  // Remove all minified files from jsmin-may folder.
  // Uncomment in case of changing any js on the site.
  
  $dir = 'f/jsmin-may';
  $objects = scandir($dir);
  foreach ($objects as $object) {
    if ($object != "." && $object != "..") {
      unlink($dir . "/" . $object);
    }
  }
  variable_del('may_minified_js');
  
}


/**
 * Returns a captcha image.
 */
function may_misc_securimage_show_ajax() {

  //require_once dirname(__FILE__) . '/securimage.php';
  
  // http://www.phpcaptcha.org/documentation/setting-options/
  
  require_once '/home/zpshop/public_addons/dommoejmechty.com/sites/all/libraries/jquery.plugins/securimage/securimage.php';

  //$img = new Securimage(array('captcha_type' => Securimage::SI_CAPTCHA_MATHEMATIC /* use math captcha */));
  $img = new Securimage();
  
  $img->code_length = 3;
  $img->num_lines = 0;

  $img->show();  // outputs the image and content headers to the browser
}


/**
 * Returns json result data with OK or error.
 */
function may_misc_checkCtCaptcha_ajax() {
  $status = TRUE;
  $output = '';
  
  $post = array();
  foreach ($_POST as $key => $value) {
    $post[$key] = check_plain(strip_tags($value));
  }

  if ($post['op'] == 'get') {
    $cap = $_SESSION['securimage_code_value']['default'];
  }
  else {
    $cap = NULL;
  }
  
  drupal_json_output(array('status' => $status, 'cap' => $cap));
}



/**
 * Implements Hook Process Html.
 * Minify html on the fly.
 */
function may_misc_process_html(&$vars) {
  
  global $user;
  
  if (!$user->uid) {
    
      // Minify a Html Page content.
      $vars['page'] = preg_replace(
        array(
          '/ {2,}/',
          '/<!--.*?-->|\t|(?:\r?\n[ \t]*)+/s',
        ),
        array(
          ' ',
          '',
        ),
        $vars['page']
      );

  }
  else {
    //dpm($vars);
  }
  
}


/**
 * Implementing hook_js_alter
 * @param $javascript
 */
function may_misc_js_alter(&$javascript) {

  ////global $user;
  ////if (!$user->uid) {
    
    // Minify all js on the page.
    
    $add_to_minified = NULL;
    $from_scratch = FALSE;
    
    $may_minified_js = variable_get('may_minified_js');
    
    if ($may_minified_js) {
      foreach($javascript as $filename => $attr){
        
        if (isset($may_minified_js[$filename])) {
          $javascript[$filename]['data'] = $may_minified_js[$filename];
        }
        elseif (strpos($filename, '.js') && !strpos($attr['data'], 'min.js') && !strpos($attr['data'], 'jsmin-may')) {
          $add_to_minified[$filename] = $attr;
        }
      }
    }
    else {
      $add_to_minified = $javascript;
      $from_scratch = TRUE;
    }
    
    // Create minified version of js files, not yet created.
    if($add_to_minified) {

      include_once DRUPAL_ROOT . '/sites/all/libraries/minify/min/lib/JSMin.php';
    
      foreach($add_to_minified as $filename => $attr){

        if(!$from_scratch || (strpos($filename, '.js') && !strpos($attr['data'], 'min.js') && !strpos($attr['data'], 'jsmin-may'))) {

          $source_fpath_short = $attr['data'];
          $source_fpath = DRUPAL_ROOT . '/' . $source_fpath_short;

          if ($source_content = file_get_contents($source_fpath)) {
            if ($minOutput = JSMin::minify($source_content)) {
              $target_path_short = 'f/jsmin-may/' . str_replace('/', '-', $source_fpath_short);
              if (file_put_contents(DRUPAL_ROOT . '/' . $target_path_short, $minOutput)) {
                $may_minified_js[$filename] = $target_path_short;
                $javascript[$filename]['data'] = $may_minified_js[$filename];
              }
            }
          }

        } // End of if(strpos($filename, '.js') && !strpos($attr['data'], "min.js") && !strpos($attr['data'], "jsmin-may")) {

      } // End of foreach($javascript as $filename => $attr){
      
      variable_set('may_minified_js', $may_minified_js);
    } // End of if($add_to_minified) {
      
    
    // Replace js with min.js
//    foreach($javascript as $filename => $attr) {
//      if (isset($may_minified_js[$filename])) {
//        $javascript[$filename]['data'] = $may_minified_js[$filename];
//      }
//    }
    
    
  ////} // End of if ($user->uid != 1) {

}


/**
 * 
 * User permissions access calback function for the admin.
 * 
 */
function may_misc_userIsAdmin() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * Implements a new view_mode.
 */
function may_misc_entity_info_alter(&$entity_info) {
//  $entity_info['node']['view modes']['home_teaser'] = array(
//    'label' => t('Home teaser'),
//    'custom settings' => TRUE,
//  );
}
 

/**
 * Flush the cache and redirect to the Home page.
 */
function may_misc_flushCache() {
  drupal_flush_all_caches();
  drupal_set_message('Cache is flushed.', 'warning');
  drupal_goto('');
}

    
/**
 * Custom page not found 404.
 * Fix for a standard drupal_not_found
 */
function may_misc_drupal_not_found() {
  // Emit the correct charset HTTP header, but not if the page callback
  // result is NULL, since that likely indicates that it printed something
  // in which case, no further headers may be sent, and not if code running
  // for this page request has already set the content type header.

  drupal_add_http_header('Content-Type', 'text/html; charset=utf-8');

  // Send appropriate HTTP-Header for browsers and search engines.
  global $language;
  drupal_add_http_header('Content-Language', $language->language);

  drupal_add_http_header('Status', '404 Not Found');

  watchdog('page not found', check_plain($_GET['q']), NULL, WATCHDOG_WARNING);

  // Check for and return a fast 404 page if configured.
  drupal_fast_404();

  // Keep old path for reference, and to allow forms to redirect to it.
  if (!isset($_GET['destination'])) {
    $_GET['destination'] = $_GET['q'];
  }

  $path = drupal_get_normal_path(variable_get('site_404', ''));
  if ($path && $path != $_GET['q']) {
    // Custom 404 handler. Set the active item in case there are tabs to
    // display, or other dependencies on the path.
    menu_set_active_item($path);
    $return = menu_execute_active_handler($path, FALSE);
  }

  if (empty($return) || $return == MENU_NOT_FOUND || $return == MENU_ACCESS_DENIED) {
    // Standard 404 handler.
    ////drupal_set_title(t('Page not found'));
    ////$return = t('The requested page "@path" could not be found.', array('@path' => request_uri()));
    
    drupal_set_title('Page Not Found');
    
    $sitemap_body = cache_get('may_sitemap_body');
    if (!$sitemap_body || empty($sitemap_body->data)) {
      $key = 'view-sitemap-page';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $sitemap_body = $query->execute()->fetchField(); 

      // Remove preface text from a Sitemap body.
      if(preg_match('/.*(<table.*)/s', $sitemap_body, $matches)) {
        $sitemap_body = $matches[1];
      }
            
      cache_set('may_sitemap_body', $sitemap_body);
    }
    else {
      $sitemap_body = $sitemap_body->data;
    }
    
    $page404_body = cache_get('may_page404');
    if (!$page404_body || empty($page404_body->data)) {
      $key = 'page-not-found';
      $query = db_select('node', 'n');
      $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
      $query->join('field_data_body', 'fb', "fb.entity_id = n.nid"); 
      $query->fields('fb', array('body_value'))
            ->condition('n.type', 'preface')
            ->condition('pk.field_preface_key_value', $key);
      $page404_body = $query->execute()->fetchField(); 

      cache_set('may_page404', $page404_body);
    }
    else {
      $page404_body = $page404_body->data;
    }
    
    $return = '<div class="main-content page404"> 
      <div class="content page preface">' . $page404_body . '<div class="sitemap field-name-body">' . $sitemap_body . '</div>
      </div>
  </div>';

    
  }

  drupal_set_page_content($return);
  $page = element_info('page');
  print drupal_render_page($page);

  // Perform end-of-request tasks.
  drupal_page_footer();
}


/**
 * Return a breadcrumbs for a current page via main_menu.
 */
function may_misc_getMenuTrail() {
  
  
  if(!$url_aliased = @$_SERVER['REDIRECT_URL']) {
    return FALSE;
  }
    
  //dpm('Target aliased url = ' . $url_aliased);
  
  $breadcrumbs = cache_get('may_breadcrumbs_for_menu');
  //dpm($breadcrumbs);
  
  $breadcrumbs = !$breadcrumbs ? array() : $breadcrumbs->data;
  if (isset($breadcrumbs[$url_aliased])) {
    //dpm('breadcrumb is found in cache');
    return $breadcrumbs[$url_aliased];
  }
  
  // Search for the url in the menu and define a breadcrumb.
  $main_menu = NULL;
  
  // Check if the url is presented in the menu.
  if($main_menu_all_items = cache_get('may_main_menu_all_items')) {
    $main_menu_all_items = $main_menu_all_items->data;
  }
  else {
    $main_menu = menu_build_tree('main-menu');
    foreach ($main_menu as $key_top => $value_top) {
      $main_menu_all_items[] = strpos($value_top['link']['href'], 'node/') !== FALSE ? $value_top['link']['href'] : '/' . $value_top['link']['href'];
      if (!empty($value_top['below'])) {
        foreach ($value_top['below'] as $key_below => $value_below) {
          $main_menu_all_items[] = strpos($value_below['link']['href'], 'node/') !== FALSE ? $value_below['link']['href'] : '/' . $value_below['link']['href'];
        }
      }
    }
    //dpm('Define may_main_menu_all_items');
    cache_set('may_main_menu_all_items', $main_menu_all_items);
  }
  
  //dpm($main_menu_all_items);
  
  $url_not_aliased = (arg(0) == 'node' ? 'node/' . arg(1) : NULL);
  if (!in_array($url_aliased, $main_menu_all_items) && !in_array($url_not_aliased, $main_menu_all_items)) {
    // Target url is not in the menu.
    //dpm('Target url is not in the menu... Exit');
    return FALSE;
  }
  
  
  //dpm('in the menu! Define breadcrumb...');
  if (!$main_menu) {
    $main_menu = menu_build_tree('main-menu');
  }
  //dpm($main_menu);
  
  
  
  $breadcrumb = '';
  
  
  
  
  //dpm($url_aliased);
  //dpm($url_not_aliased);
  
  foreach ($main_menu as $key_top => $value_top) {
    // Check top link.
    if ($value_top['link']['hidden']) {
      continue;
    }
    if ('/' . $value_top['link']['href'] == $url_aliased || $value_top['link']['href'] == $url_not_aliased) {
      //dpm('Found top url ' . $value_top['link']['link_title']);
      $breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), $value_top['link']['link_title'] )));
    }
    else {
      // Check nested links.
      if (!empty($value_top['below'])) {
        foreach ($value_top['below'] as $key_below => $value_below) {
          if ($value_below['link']['hidden']) {
            continue;
          }
          if ('/' . $value_below['link']['href'] == $url_aliased || $value_below['link']['href'] == $url_not_aliased) {
            //dpm('Found below url ' . $value_below['link']['link_title'] . ' --- ' . $key_top . ' --- ' . $key_below);
            $breadcrumb = theme('breadcrumb', array('breadcrumb' => array(l('Home', NULL), l($value_top['link']['link_title'], $value_top['link']['href']), $value_below['link']['link_title'] )));
          }
        }
      }
    }
    
  }

  $breadcrumbs[$url_aliased] = $breadcrumb;
  cache_set('may_breadcrumbs_for_menu', $breadcrumbs);
  
  return $breadcrumb;
}

/**
 * Loads an additional user_data for articles, etc.
 *
 * @param $uid
 *   A user account uid.
 * @return
 *   The user's generated object with additional data.
 */
function may_misc_loadUserExtendedData($uid) {
  
  $cid = 'may_userExtendedData_all';
  $cache = cache_get($cid, 'cache');
  
  if ($cache && !empty($cache->data) && !empty($cache->data[$uid]) && $cache->expire > time()) {
    $out = $cache->data[$uid];
  }
  else 
  {
    $userExtendedData_all = $cache ? $cache->data : array();
    
    $query = db_select('realname', 'rn')
      ->fields('rn', array('realname'))
      ->fields('g', array('field_u_gplus_profile_value'));
    $query->condition('uid', $uid);
    $query->leftJoin('field_data_field_u_gplus_profile', 'g', 'g.entity_id = ' . $uid . '');
    $userExtendedData = $query->execute()->fetchObject();
    
    $userExtendedData_all[$uid] = $userExtendedData;

    cache_set($cid, $userExtendedData_all, 'cache', strtotime('+31 day'));
    $out = $userExtendedData_all[$uid];
  }
    
  return $out;
}


/**
 * Saves or updates a field.
 */
function may_misc_fieldDelete($field_name, $entity_id, $target_field_name = NULL, $target_field_id = NULL, $entity_ids = array()) {
  
  if (!$entity_id && $target_field_id) {
    if (empty($entity_ids)) {
      // Delete all nodes fields with set value field.
      db_delete('field_data_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->execute();
      db_delete('field_revision_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->execute();
    }
    else {
      // Delete only specific nodes fields with set value field.
      db_delete('field_data_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->condition('entity_id', $entity_ids, 'IN')
        ->execute();
      db_delete('field_revision_field_' . $field_name)
        ->condition($target_field_name, $target_field_id)
        ->condition('entity_id', $entity_ids, 'IN')
        ->execute();
    }
      
  }
  else {
    db_delete('field_data_field_' . $field_name)
      ->condition('entity_id', $entity_id)
      ->execute();
    db_delete('field_revision_field_' . $field_name)
      ->condition('entity_id', $entity_id)
      ->execute();
  }
  
  
  field_cache_clear();
}


/**
 * Saves or updates a field.
 */
function may_misc_fieldSave($field_name, $entity_id, $data, $entity_type = 'node', $bundle = NULL) {
  
  if(!$bundle) {
    $bundle = $entity_type;
  }
  
  $query = db_select('field_data_field_' . $field_name, 'f');
  $query->fields('f', array('field_' . $field_name . '_value'))
        ->condition('f.entity_id', $entity_id)
        ->condition('f.entity_type', $entity_type);
  $result = $query->execute(); //->fetchField();
  
  if ($result->rowCount()) {
    // Need update an existing field.
    db_update('field_data_field_' . $field_name)
      ->fields(array(
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,    
        'field_' . $field_name . '_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();

    db_update('field_revision_field_' . $field_name)
      ->fields(array(
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,     
        'field_' . $field_name . '_value' => $data,
      ))
      ->condition('entity_id', $entity_id)
      ->condition('entity_type', $entity_type)
      ->execute();
  }
  else {
    // Need create a new field.
    db_insert('field_data_field_' . $field_name) 
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_value' => $data,
      ))
      ->execute();

    db_insert('field_revision_field_' . $field_name)
      ->fields(array(
        'entity_type'=> $entity_type,
        'bundle'=> $bundle,
        'deleted'=> 0,                
        'entity_id' => $entity_id,
        'delta' => 0,  
        'revision_id'=> $entity_id,
        'language'=> 'und',  
        'field_' . $field_name . '_value' => $data,
      ))
      ->execute();
  }

  field_cache_clear();
}


/**
 * Prevent Enter button on Content_GetVoIP page while inline editing fields.
 */
function may_misc_preventEnterOnEditField() {
  $path_to_custom_js = drupal_get_path('module', 'may_misc') . '/js/';
  drupal_add_js($path_to_custom_js . 'may_preventEnterOnEditField.js');
  
}


/**
 * Hook menu alter.
 *
 */
function may_misc_menu_alter(&$items) {
  // Example - disable the page at node/add
  //$items['node/add']['access callback'] = FALSE;
  
  // Remove all Tagadelic urls.
  unset($items['tagadelic'], $items['tagadelic/list/%tagadelic_vocs'], $items['tagadelic/chunk/%tagadelic_vocs']);
}


/**
 * Set (if bigger then 12 hours period) and returns a last updated time stamp
 *
 */
function may_misc_lastUpdatedStamp($min_hours = 24, $relative_path = NULL) {

  if (!$relative_path) {
    $relative_path = $_SERVER['REQUEST_URI'];
    if ($relative_path == '/home') {
      $relative_path = '/';
    }
  }
  
  $query = db_select('may_last_updated', 'lu')
      ->fields('lu', array('timestamp'));
  $query->condition('lu.path', $relative_path);
  $last_updated = $query->execute()->fetchfield();
  
  $current_time = time();
  
  if (!$last_updated || ($current_time - $last_updated) > $min_hours * 3600 ) {
    // Update or insert new timestamp
    if ($last_updated) {
      $result = db_update('may_last_updated')
        ->fields(array(
          'timestamp' => $current_time,
        ))
        ->condition('path', $relative_path)
        ->execute();
    }
    else {
      $result = db_insert('may_last_updated')
        ->fields(array(
          'path' => $relative_path,
          'timestamp' => $current_time,
        ))
        ->execute();
    }
    return '<div class="ts">' . t('Last Updated: ') . date('F d, Y \a\t g:ia', $current_time) . '</div>';
  }
  else {
    return '<div class="ts">' . t('Last Updated: ') . date('F d, Y \a\t g:ia', $last_updated) . '</div>';
  }
}


/**
 * Get prefaces main section rendered.
 *
 */
function may_misc_getPrefaceMainSection($key) {
  $node = may_misc_getPrefaceByKey($key);
  $node->title_no_link = TRUE;
  $node_view = node_view($node, 'full');
  
  return render($node_view/*['body']*/);
}


/**
 * Get prefaces bottom section rendered.
 *
 */
function may_misc_getPrefaceBottomSection($key) {
  $node = may_misc_getPrefaceByKey($key);
  $node_view = node_view($node, 'full');

  return render($node_view['field_preface_bottom']);
}


/**
 * Renders metatags array with a new order of tags: description, keywords, the rest...
 *
 */
function may_misc_getUserRealName($uid) {
  
  $query = db_select('realname', 'rn')
      ->fields('rn', array('realname'));
  $query->condition('rn.uid', $uid);
  $realname = $query->execute()->fetchfield();
  
  return $realname;
}


/**
 * Process variables for search-result.tpl.php.
 *
 * The $variables array contains the following arguments:
 * - $result
 * - $module
 *
 * @see search-result.tpl.php
 */
function may_misc_preprocess_search_result(&$variables) {
  
  // Original code.
  /*
  global $language;
  
  $result = $variables['result'];
  $variables['url'] = check_url($result['link']);
  $variables['title'] = check_plain($result['title']);
  if (isset($result['language']) && $result['language'] != $language->language && $result['language'] != LANGUAGE_NONE) {
    $variables['title_attributes_array']['xml:lang'] = $result['language'];
    $variables['content_attributes_array']['xml:lang'] = $result['language'];
  }

  $info = array();
  if (!empty($result['module'])) {
    $info['module'] = check_plain($result['module']);
  }
  if (!empty($result['user'])) {
    $info['user'] = $result['user'];
  }
  if (!empty($result['date'])) {
    //$info['date'] = format_date($result['date'], 'short');
    // a4s changes
    //$info['date'] = date('F d, Y \a\t g:ia', $result['date']);
    //$info['date'] = date('F d, Y \a\t g:ia', $result['node']->created);
  }
  if (isset($result['extra']) && is_array($result['extra'])) {
    $info = array_merge($info, $result['extra']);
  }
  // Check for existence. User search does not include snippets.
  $variables['snippet'] = isset($result['snippet']) ? $result['snippet'] : '';
  // Provide separated and grouped meta information..
  $variables['info_split'] = $info;
  $variables['info'] = implode(' - ', $info);
  $variables['theme_hook_suggestions'][] = 'search_result__' . $variables['module'];
  */
  
  
  // a4s changes
  $result = $variables['result'];
  if (!empty($result['date'])) {
    $info = array();
    //$info['date'] = format_date($result['date'], 'short');
    //$info['date'] = date('F d, Y \a\t g:ia', $result['date']);
    $info['date'] = date('F d, Y \a\t g:ia', $result['node']->created);
    
    if (isset($result['extra']) && is_array($result['extra'])) {
      $info = array_merge($info, $result['extra']);
    }
    $variables['info_split'] = $info;
    $variables['info'] = implode(' - ', $info);
  }
}



/**
 * Implements hook_ranking() for Search ranking.
 */
function may_misc_ranking() {
 // Add relevance based on creation or changed date.
  if ($node_cron_last = variable_get('node_cron_last', 0)) {
    $ranking['recent_created'] = array(
      'title' => t('Recently posted (created)'),
      // Exponential decay with half-life of 6 months, starting at last indexed node
      'score' => 'POW(2.0, (n.created - :node_cron_last) * 6.43e-8)',
      'arguments' => array(':node_cron_last' => $node_cron_last),
    );
  }
  return $ranking;
}


/**
 * Push field tags (topics) to metatags in the Head.
 */
function may_misc_pushTagsToMetatags($name, $value, $weight = 'NA') {
  switch ($name) {
    case 'keywords':
    case 'news_keywords':
      $t = '';
      $tags = element_children($value);
      foreach ($tags as $tag) {
        $t .= $t ? ', ' . $value[$tag]['#title'] : $value[$tag]['#title'];
      }
      if ($t) {
        may_misc_addMetatag($name, $t, NULL, $weight);
      }
      break;
  }
}


/**
 * Allow modules to define namespaces for RDF mappings.
 *
 * Many common namespace prefixes are defined in rdf_rdf_namespaces(). However,
 * if a module implements hook_rdf_mapping() and uses a prefix that is not
 * defined in rdf_rdf_namespaces(), this hook should be used to define the new
 * namespace prefix.
 *
 * @return
 *   An associative array of namespaces where the key is the namespace prefix
 *   and the value is the namespace URI.
 *
 * @ingroup rdf
 */
// a4s Seems it didn't work out...
function may_misc_rdf_namespaces() {
  return array(
    'xmlns:addthis'  => 'http://www.addthis.com/help/api-spec',
    'xmlns:g'  => 'http://base.google.com/ns/1.0',
  );
}


/**
 * Implements hook_TYPE_alter().
 * 
 * Specifically hook_html_head_alter().
 */
function may_misc_html_head_alter(&$object) {
  //dpm($object);
  if (isset($object['rdf_node_comment_count'])) {
    unset($object['rdf_node_comment_count']['#attributes']['datatype']);
  }
}


/**
 * Implements hook_views_api().
 *
 * @return array
 *   Views api definition.
 */
/*
function may_misc_views_api() {
//  return array(
//    'api' => 3,
//    'path' => drupal_get_path('module', 'may_misc') . '/inc',
//  );
} 
*/


/**
 * Form with a fieldset of Add content section for Admin Content page (by Views).
 */
function may_misc_AddContentSection_form() {
  
  global $user;
  
  $types = node_type_get_types();
  
  // Hide some content tupes if not a root.
  if ($user->uid != 1) {
    unset($types['admin_page'], $types['preface'], $types['quote'], $types['webform']);
  }
  
  $options = array('' => '- Select a content type -');
  foreach ($types as $type => $value) {
    $options[str_replace('_', '-', $type)] = $value->name;
  }
  
  $form['add_content'] = array(
    '#type' => 'fieldset',
    '#title' => t('Add a new content'),
    '#collapsible' => TRUE,
  );
  $form['add_content']['select_type'] = array(
    '#type' => 'select',
    //'#title' => 'Select content type',
    '#options' => $options,
    '#attributes' => array('id' => 'select_type',  'onChange' => "top.location.href='http://dommoejmechty.com/node/add/" . "' + document.getElementById('select_type').options[document.getElementById('select_type').selectedIndex].value"),
  );
  
  return $form;
}


/**
 * Get a picture from a remote server.
 */
function may_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs)
{
	
    $curl = curl_init();

    // Setup headers - I used the same headers from Firefox version 2.0.0.6
    // below was split up because php.net said the line was too long. :/
    $header[0] = "Accept: text/xml,application/xml,application/xhtml+xml,";
    $header[0] .= "text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5";
    $header[] = "Cache-Control: max-age=0";
    $header[] = "Connection: keep-alive";
    $header[] = "Keep-Alive: 300";
    $header[] = "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7";
    $header[] = "Accept-Language: en-us,en;q=0.5";
    $header[] = "Pragma: ";
    // browsers keep this blank.

    $referers = array("google.com", "yahoo.com", "msn.com", "ask.com", "live.com");
    $choice = array_rand($referers);
  	//if ($referer == "") 
    $referer = "http://www." . $referers[$choice] . "/";

    //$browsers = array("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092510 Ubuntu/8.04 (hardy) Firefox/3.0.3", "Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1) Gecko/20060918 Firefox/2.0", "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3", "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; SLCC1; .NET CLR 2.0.50727; Media Center PC 5.0; .NET CLR 3.0.04506)");
    //$choice2 = array_rand($browsers);
    //$lines = file('/home/xxx/public_html/sites/all/modules/xxx/ua.txt');
    //$browser = trim($lines[$agentid]);

    curl_setopt($curl, CURLOPT_URL, $url);
    //curl_setopt($curl, CURLOPT_USERAGENT, $browser);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
    curl_setopt($curl, CURLOPT_REFERER, $referer);
    //curl_setopt($curl, CURLOPT_AUTOREFERER, true);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    curl_setopt($curl, CURLOPT_TIMEOUT, 300);
    curl_setopt($curl, CURLOPT_MAXREDIRS, 7);
    curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);

    $data = curl_exec($curl);

    if ($data === false) {
      $data = curl_error($curl);
      // close the connection
      curl_close($curl);
      return $data;
    }

    // close the connection
    curl_close($curl);

    // write content to a file
    file_put_contents($file_local_abs, $data);

    return null; //OK
}


/**
 * Return trimmed teaser with right size (cleared from images) and with separated a styled image, cutted off from the body.
 */
function may_misc_getImagesFromBody($body_full_markup, $nid = NULL) {
 
  $matches = NULL;
  $found_image = NULL;
  
  $images = NULL;
  
  // Search for all images.
  if (preg_match_all('/<img[^>]+>/i', $body_full_markup, $matches)) {
    $found_image = TRUE;
    //dpm($matches);
    $images_style = 'medium';
    foreach ($matches[0] as $i) {
      preg_match_all('/(alt|title|src)="([^"]*)"/i',$i, $matches2);
      //dpm($matches2);
      foreach ($matches2[1] as $index => $key) {
        $image[$key] = $matches2[2][$index];
      }

      $image['src'] = urldecode($image['src']); //str_replace('%20', ' ', $main_image['src']);
      $image['uri'] = may_misc_getStreamUriFromRelativePath($image['src']);
      //$main_image['uri'] = $stream_path;

      $image['image_html'] = theme('image_style', array( 'path' => $image['uri'], 'style_name' => $images_style));
      //$main_image_html = '<div>' . $main_image_html;
      $images[] = $image;
    }
  }

  return $images;
}


/**
 * Return trimmed teaser with right size (cleared from images) and with separated a styled image, cutted off from the body.
 */
function may_misc_getArticleTeaserData($target, $body_full_markup, $nid, $characters_num = NULL, $only_teaser = FALSE) {
 
  $main_image = NULL;
  $main_image_html = NULL;
  $side_block_image_html = NULL;
  $matches = NULL;
  $found_image = NULL;
  
  
  
  // Search for all images.
  if (preg_match_all('/<img[^>]+>/i', $body_full_markup, $matches)) {
    $found_image = TRUE;
    //dpm($matches);
    $images_style = 'medium';
    foreach ($matches[0] as $i) {
      preg_match_all('/(alt|title|src)="([^"]*)"/i',$i, $matches2);
      //dpm($matches2);
      foreach ($matches2[1] as $index => $key) {
        $image[$key] = $matches2[2][$index];
      }

      $image['src'] = urldecode($image['src']); //str_replace('%20', ' ', $main_image['src']);
      $stream_path = may_misc_getStreamUriFromRelativePath($image['src']);
      //$main_image['uri'] = $stream_path;

      $image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $images_style));
      //$main_image_html = '<div>' . $main_image_html;
      $images[] = array('image_html' => $image_html, 'src' => $image['src'], 'stream_path' => $stream_path);
    }
  }
  
  if (preg_match('/<img[^>]+>/i', $body_full_markup, $matches)) {
    $found_image = TRUE;
    preg_match_all('/(alt|title|src)="([^"]*)"/i',$matches[0], $matches);
    foreach ($matches[1] as $index => $key) {
      $main_image[$key] = $matches[2][$index];
    }
    $body_full_markup = preg_replace('/<img[^>]+>/i', '', $body_full_markup);
  }
  elseif (preg_match('/\[video:.*v=(.*)\]/i', $body_full_markup, $matches)) {
    // [video: https://www.youtube.com/watch?v=H1vdPJzzzAY]
    $video_id = $matches[1];
    if($main_image['src'] = may_misc_getYoutubeVideoThumb($video_id)) {
      $found_image = TRUE;
    }
    $body_full_markup = preg_replace('|\[video:.*(http.*)\]|', '<a href="$1"> [Watch a video] </a>', $body_full_markup);
  }
  
  
  if ($found_image) {

    $main_image['src'] = urldecode($main_image['src']); //str_replace('%20', ' ', $main_image['src']);
    $stream_path = may_misc_getStreamUriFromRelativePath($main_image['src']);
    $main_image['uri'] = $stream_path;
    
    $image_size = getimagesize(ltrim($main_image['src'], '/'));

    // Scale and cut.
    /*
    if ($image_size[0] / $image_size[1] > 1.5) {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_h'));
    }
    else {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_v'));
    }
    */
    // Scale only.
    if ($image_size[0] / $image_size[1] > 1) {
      $style_name = 'article_thumbnail_h';
      ////$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
      //$main_image['src_themed'] = image_style_url($style_name, $stream_path);
    }
    else {
      $style_name = 'article_thumbnail_v';
      ////$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
      //$main_image['src_themed'] = image_style_url($style_name, $stream_path);
    }
    
    $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
    $main_image_html = '<div class="thumb">' . $main_image_html . '</div>';
    
    $side_block_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_side_block'));
    $side_block_image_html = '<div class="thumb">' . $side_block_image_html . '</div>';
  
    
    // Image for sharing.
    if ($image_size[0] / $image_size[1] > 1) {
      // Too wide. will not be cutted.
      $style_name_share = 'share_wide';
      //$main_image['src_themed'] = image_style_url('share_wide', $stream_path);
    }
    elseif ($image_size[1] / $image_size[0] < 1) {
      // Too tall. will not be cutted.
      $style_name_share = 'share_tall';
      //$main_image['src_themed'] = image_style_url('share_tall', $stream_path);
    }
    else {
      //Normal image, will not be cutted.
      $style_name_share = 'share';
      //$main_image['src_themed'] = image_style_url('share', $stream_path);
    }
    $main_image['src_themed'] = image_style_url($style_name_share, $stream_path);
    
    
    //$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail'));
    
    // Clear existing image_cached files.
    $default_file_path = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/files');
    $styles_to_delete = array($style_name, $style_name_share, 'block_thumb');
    foreach ($styles_to_delete as $style_to_delete) {
      $to_delete = str_replace($default_file_path, $default_file_path . '/styles/' . $style_to_delete . '/public' , $main_image['src']);
      if (file_exists($to_delete)) {
        unlink($to_delete);
      } 
    }
      
    
  } // End of if ($found_image) {

  $teaser = strip_tags($body_full_markup);
  
  
  if (!$characters_num) {
    if ($main_image_html) {
      $characters_num = 130;
    }
    else {
      $characters_num = 250;
    }
  }
  
  $teaser_block = trim(drupal_substr($teaser, 0, 200));// . '...';
  $last_pos = strrpos($teaser_block, ' ');
  $teaser_block = substr_replace ($teaser_block, '...', $last_pos);
  
  $teaser_home = trim(drupal_substr($teaser, 0, 200));// . '...';
  $last_pos = strrpos($teaser_home, ' ');
  $teaser_home = substr_replace ($teaser_home, '...', $last_pos);
  
//  if ($found_image) {
//    $teaser_side_block_chars = 75;
//  }
//  else 
  {
    $teaser_side_block_chars = 85;
  }
  $teaser_side_block = trim(drupal_substr($teaser, 0, $teaser_side_block_chars));
  $last_pos = strrpos($teaser_side_block, ' ');
  $teaser_side_block = '<div class="teaser-content">' . substr_replace ($teaser_side_block, '...' . l('Read more', 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos) . '</div>';
  
  
  // $teaser = text_summary($body_full_markup, 'full_html', $characters_num);
  $teaser = trim(drupal_substr($teaser, 0, $characters_num));
  
  
  // Replace the last word with ...
  // preg_match('/^.*\s(.*)$/i', trim(strip_tags($teaser)), $matches);
  // $last_pos = strrpos($teaser, $matches[1]);
  $last_pos = strrpos($teaser, ' ');
  
  // $teaser = substr_replace ($teaser, '...' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more')))) , $last_pos, strlen($matches[1]));
  $teaser = substr_replace ($teaser, '... ' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos);

  if ($only_teaser) {
    return $main_image_html . $teaser;
  }
  else {
    return array('images' => $images, 'teaser_only' => $teaser, 'teaser_side_block' => $teaser_side_block, 'teaser' => $main_image_html . $teaser, 'teaser_block' => $teaser_block, 'teaser_home' => $main_image_html . $teaser_home, 'main_image' => $main_image, 'main_image_html' => $main_image_html, 'side_block_main_image' => $side_block_image_html);
  }
  
}


/**
 * Rewrite links like /f/pdfs/ to alias /pdfs/ (forward) and vise versa and others.
 */
function may_misc_rewriteLinks($type, $data, $direction = 'forward') {
  switch ($type) {
    case 'pdfs':
      if ($direction == 'forward') {
        // Converts from /f/pdfs/ to /pdfs/
        // the real path will be accessible with .htaccess mod_rewrite settings in the root of the site.

        // $body = $form_state['values']['body'];
        $body = $data['values']['body'];
        $count1 = $count2 = 0;
        if ($body['und'][0]['value']) {
          $body['und'][0]['value'] = preg_replace('|"/f/pdfs|', '"/pdfs', $body['und'][0]['value'], -1, $count1);
        }
        if ($body['und'][0]['summary']) {
          $body['und'][0]['summary'] = preg_replace('|/f/pdfs|', '"/pdfs', $body['und'][0]['summary'], -1, $count2);
        }
        if ($count1 + $count2 > 0) {
          return $body;
        }
      }
      else {
        // Converts from /pdfs/ to /f/pdfs/

        // $body = $form['body']
        $body = $data['body'];
        if ($body['und'][0]['#default_value']) {
          $body['und'][0]['#default_value'] = preg_replace('|"/pdfs|', '"/f/pdfs', $body['und'][0]['#default_value'], -1);
        }
        if ($body['und'][0]['summary']['#default_value']) {
          $body['und'][0]['summary']['#default_value'] = preg_replace('|"/pdfs|', '"/f/pdfs', $body['und'][0]['summary']['#default_value'], -1);
        }
        return $body;
      }
      break;
  }
  return NULL;
}


/**
 * Convert path from Drupal stream uri.
 */
function may_misc_getPathFromStreamUri($uri) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');
  
  return $default_file_path . str_replace($file_default_scheme . ':/', '', $uri);
}


/**
 * Convert a relative or absolute path to Drupal stream uri.
 */
function may_misc_getStreamUriFromRelativePath($path) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');

  $stream_path = str_replace('http://dommoejmechty.com', '', $path);
  $stream_path = ltrim($stream_path, '/');
  return $file_default_scheme . '://' . str_replace($default_file_path . '/', '', $stream_path);
}


/**
 * Adds js to a page for making all images zoomable.
 */
function may_misc_addZoomableImagesJs() {
  //1, 3, 4, 
  drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');
  drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css', array('preprocess' => FALSE)); // array('group' => CSS_THEME, 'preprocess' => FALSE)

  $path_to_module = drupal_get_path('module', 'may_misc');
  drupal_add_js($path_to_module . '/js/may_makeImagesZoomable.js');
}


/**
 * Helper function to add metatag to a current page.
 */
function may_misc_addMetatag($name, $content, $href = NULL, $weight = 'NA') {
  if ($content) {
    if ($name == 'title') {
      //dpm($content);
      //$content = str_replace('| GetVoIP', '', $content);
      drupal_set_title($content);
    }
    else {
      $meta = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => $name,
            'content' => $content,
        )
      );
      if ($weight != 'NA') {
        $meta['#weight'] = $weight;
      }
      drupal_add_html_head($meta, $name);
    }
  } // End of if ($content) {
  elseif($href) {
    $meta = array(
      '#tag' => 'link',
      '#attributes' => array(
          'rel' => $name,
          'href' => $href,
      )
    );
    if ($weight != 'NA') {
      $meta['#weight'] = $weight;
    }
    drupal_add_html_head($meta, $name);
  } // End of elseif($href) {
}


/**
 * Get the title metatag for the front page from the Metatag module's settings.
 */
function may_misc_metatag_getFrontTitle() {
  $metatags = metatag_metatags_view('global:frontpage', array());
  return $metatags['title']['#attached']['metatag_set_preprocess_variable'][0][2];
}


/**
 * Helper function to add sharing data (metatags and links) to a current page.
 */
function may_misc_addSocialShareData_toPage($node) {
  
  global $schema_org_type;
  $image = NULL;
  $og_type = NULL;
  $title = NULL;
  $description = NULL;
  $tags = array();
  
  //$title = $node->title;
  if (@$node->field_preface_key['und'][0]['value'] == 'front') {
    
    $title = may_misc_metatag_getFrontTitle();
    
    $tags = array(
      
      // Add all rss feeds to the home page (exceot the main rss, which will be added to all pages).
      'blog_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'May Blog',
            'href' => 'http://dommoejmechty.com/blog/rss.xml',
        ),
      ),
        
    );
    
  }
  if (!$title) {
    if (isset($node->metatags['title']['value']) && $node->metatags['title']['value']) {
      $title = $node->metatags['title']['value'];
    }
    else {
      $title = $node->title;
      
      //Set the right title metatag for the page if it's not defined.
      if (isset($node->metatags['title']['value'])) {

          $global_metatags_config = metatag_config_load('node:' . $node->type);
          // Use the upper level config if it's not defined for a specific content type.
          if (!$global_metatags_config || empty($global_metatags_config->config['title']['value'])) {
            $global_metatags_config = metatag_config_load('node');
          }
          
          if (!empty($global_metatags_config->config['title']['value'])) {
            global $language;
            global $altered_head_title;
            $altered_head_title = token_replace($global_metatags_config->config['title']['value'], array('node' => $node), array('language' => $language, 'sanitize' => FALSE));
            may_misc_addMetatag('title', $altered_head_title);
          }

      }
      
      
    }
  }

  
  
  switch ($node->type) {
    case 'blog_post':
    case 'news_post':
    case 'article':
      if (isset($node->field_main_image['und'][0]['value']) && $node->field_main_image['und'][0]['value']) {
        $image = unserialize($node->field_main_image['und'][0]['value']);
        if (isset($image['src_themed']) && $image['src_themed']) {
          $image = $image['src_themed'];
        }
        elseif (isset($image['src']) && $image['src']) {
          $image = $image['src'];
        }
        else {
          $image = NULL;
        }
      }
    
      /*
      if (!@$node->metatags['description']['value']) {
        $description = $title . '...';
      }
      */
      
      $og_type = 'article';
      $schema_org_type = 'Article';
      
      break;
     
    
  }
  
  $title = token_replace($title);
  
  
  if (!$image){
    // Show default image - the logo.
    $image = '/sites/all/themes/may/css/images/may-logo-t.png';
  }

  if (!strpos($image, '//dommoejmechty.com')) {
    $image = 'http://dommoejmechty.com/' . ltrim($image, '/');
  }

  $tags += array(
       /*
      'title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'title',
              'content' => "Video '" . $node->title . "' by " . $publisher_title,
          ),
      ),
      'DC.title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'DC.title',
              'content' => $node->title,
          ),
      ),
      'description' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => (isset($node->body['und'][0]['summary']) AND $node->body['und'][0]['summary'])?$node->body['und'][0]['summary']:drupal_substr(strip_tags($node->body['und'][0]['value']), 0, 200) . '...',
          ),
      ),
      'author' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'author',
              'content' => $publisher_title,
          ),
      ),



      'medium' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'medium',
              'content' => 'video',
          ),
      ),

      'video_type' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_type',
              'content' => 'application/x-shockwave-flash',
          ),
      ),

      'video_height' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '300',
          ),
      ),

      'video_width' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '500',
          ),
      ),


      'video_src' => array(
          '#tag' => 'link', // The #tag is the html tag - <link />
          '#attributes' => array( 
              'href' => 'http://ripplin.com/sites/all/libraries/flowplayer/flowplayer-3.2.8.swf?config=' . urlencode('http://ripplin.com/video-src?v=' . $node->nid),
              'rel' => 'video_src',
          ),
      ),
      */
  
  
/*      
      'fb:admins' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'fb:admins',
          'content' => 'http://www.facebook.com/getvoipservice',
      ),
    ),
*/
    // Title for Facebook.
    'og:title' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:title',
          'content' => $title,
      ),
    ),
      
    // Title for G+.
    'name' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'name',
          'content' => $title,
      ),
    ),
      
    'image_src' => array(
      '#tag' => 'link', // The #tag is the html tag - <link />
      '#attributes' => array( 
          'href' => $image,
          'rel' => 'image_src',
          //'type' => 'text/css',
      ),
    ),
  
    // For Facebook.
    'og:image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:image',
          'content' => $image,
      ),
    ),
      
    // For G+.  
    'image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'image',
          'content' => $image,
      ),
    ),
      
      
      
    // Add main rss feed to every page.
    'main_rss' => array(
      '#tag' => 'link', 
      '#attributes' => array( 
          'rel' => 'alternate',
          'type' => 'application/rss+xml',
          'title' => 'Latest Articles from May',
          'href' => 'http://dommoejmechty.com/rss.xml',
      ),
    ),
      
  );

  /*  
  if ($description) {
    
    $tags['description'] = array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => $description,
          ),
      );
  }
  */
  
  if ($og_type) {
   
    $tags['og:type'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'property' => 'og:type',
            'content' => $og_type,
        ),
    );
  }
  
  
        
  foreach ($tags as $key => $val)
      drupal_add_html_head($val, $key);
        
}


/**
 * Get img src for Share from Uri.
 */
function may_misc_getShareSrcThemed_fromUri($uri) {
  
  // Define share pic.
  $image_size = getimagesize(ltrim(may_misc_getPathFromStreamUri($uri), '/'));
  // Image for sharing.
  if ($image_size[0] / $image_size[1] > 1) {
    // Too wide. will not be cutted.
    $out = image_style_url('share_wide', $uri);
  }
  elseif ($image_size[1] / $image_size[0] < 1) {
    // Too tall. will not be cutted.
    $out = image_style_url('share_tall', $uri);
  }
  else {
    //Normal image, will not be cutted.
    $out = image_style_url('share', $uri);
  }
  
  return $out;
}


/**
 * Implements hook_url_inbound_alter().
 */
function may_misc_url_inbound_alter(&$path, $original_path, $path_language) {
//Create the path /contact-us from /contact
//if (preg_match('|^contact-us$|', $path, $matches)) {
//  $path = 'contact';
//}
//else

  
  
//  if ($path == 'voip-provider-submit-user-review') {
//    $path = 'node/add/review';
//  }
//  elseif ($path == 'voip-phone-submit-user-review') {
//    $path = 'node/add/phone-review';
//  }
  
  
  
//  elseif (preg_match('|^pdfs\/(.*)|', $path, $matches)) {
//    //$path = 'pdfs/voipe911-advisory.pdf';
//    $path = 'f/pdfs/' . $matches[1];
//    //$path = '';
//  }
}


/**
 * Implements hook_url_outbound_alter().
 */
function may_misc_url_outbound_alter(&$path, &$options, $original_path) {
  // Create the path /contact-us from /contact
//  if (preg_match('|^contact$|', $path, $matches)) {
//    $path = 'contact-us';
//  }
//  else

  
  //if (!empty($options['attributes']['rel'])) 
//  global $user;
//  if ($path == 'http://click.websitegear.com/track/1883449')
//  {
//    //$options['attributes']['rel'] = 'nofollow';
//    //dpm($path);
//    //dpm($options);
//    //unset($options['attributes']['rel']);
//    $options['attributes']['rel'] = 'yyy';
//    //$options['attributes']['target'] = '_parent';
//    $options['fragment'] = 'zzz';
//    //dpm($options);
//  }
  
  
  
  
  
//  if ($path == 'node/add/review') {
//    $path = 'voip-provider-submit-user-review';
//  }
//  elseif ($path == 'node/add/phone-review') {
//    $path = 'voip-phone-submit-user-review';
//  }
//  else
    if (preg_match('|^f\/pdfs\/(.*)|', $path, $matches)) {
    //$path = 'f/pdfs/voipe911-advisory.pdf';
    $path = 'pdfs/' . $matches[1];
  }
}


/**
 * Loads jquery plugin Colorbox to open videos in popup windows
 */
function may_misc_loadColorboxForVideoLinks($type = 'YouTube Direct Link') {
  switch ($type) {
    case 'YouTube Direct Link':
        // for links with a class "yt-direct" like <a class="yt-direct" href="http://www.youtube.com/embed/9fWAFw4iSrg?rel=0&amp;wmode=transparent" title="Fonality HUD - Full Demo">Fonality HUD - Full Demo</a>
        
        drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox-min.js');
        //drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');
        
        drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css');
        $path_to_custom_js = drupal_get_path('module', 'may_misc') . '/js/';
        drupal_add_js($path_to_custom_js . 'may_colorbox_p_video.js');
        break;
  }
}


/**
 * Test page function for url /test.
 */
function may_misc_getYoutubeVideoThumb($video_id) {
  
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', '/f');
  
  $url = 'http://img.youtube.com/vi/' . $video_id . '/0.jpg'; //'/maxresdefault.jpg';
  $file_local = $default_file_path . '/vthumbs/' . $video_id . '.jpg';
  $file_local_abs = DRUPAL_ROOT . '/' . $file_local;
  if (!may_misc_curl_file_from_remote_site_likeBrowser($url, $file_local_abs)) {
    return $file_local;
  }
  else {
    return NULL; // Failed.
  }
}


/**
 * Creates imagecache image if it doesnt exist.
 */
function may_misc_createCachedImageIfNotExists($relative_path, $style_name = NULL) {
  // Assure that the imagecache file is created already, or recreate it.
  if (!file_exists($relative_path)) {
    
    // Find out the style name from 'f/styles/logo_provider_chart_main/public/p/logos/Nextiva-Logo2.png';
    if (!$style_name) {
      $path_part = explode('/styles/', $relative_path);
      $path_part = explode('/public/', $path_part[1]);
      $style_name = $path_part[0];
    }
    $style = image_style_load($style_name);
    //$styled_file_path = 'f/styles/logo_provider_chart_main/public/p/logos/Nextiva-Logo2.png';
    //$original_file_path = 'f/p/logos/Nextiva-Logo.png';
    $file_path = str_replace('styles/' . $style_name . '/public/', '', $relative_path);
    $source = may_misc_getStreamUriFromRelativePath($file_path);
    $destination = image_style_path($style_name, $source);
    if (!image_style_create_derivative($style, $source, $destination)) {
      return FALSE;
    }
  }
  
  return TRUE;
}


/**
 * Curl - GET.
 */
function may_misc_curlGET($url) {
  
  // GET.
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  
  // If POST.
  //  curl_setopt($curl, CURLOPT_POST, TRUE);
  //  curl_setopt($curl, CURLOPT_POSTFIELDS, $params);
  
  $data_from = curl_exec($curl);
  curl_close($curl);
  
  return $data_from;
}


/**
 * Implements hook_mail().
 */
function may_misc_mail($key, &$message, $params) {
//  switch ($key) {
//    case 'request_quote':
//      $message['subject'] = 'GV New request for a quote';
//      $message['body'][] = theme('may_misc_requestQuote_mail', $params['request_data']);
//      break;
//    
//  }
}  


/**
 * Helper function to send preset messages.
 */
function may_misc_sendMessage($tag, $data = NULL) {
  
//  switch ($tag) {
//    
//    case 'new_phone_review_admin_notify':
//      global $language;
//      $params['phone_name'] = $data['phone_name'];
//      drupal_mail('may_misc', 'new_phone_review_admin_notify', 'ry@dommoejmechty.com', $language->language, $params);
//      drupal_mail('may_misc', 'new_phone_review_admin_notify', 'all4senses@gmail.com', $language->language, $params);
//      
//      break;
//  
//    
//  }
}


/**
 * Get site's admins objects.
 */
function may_misc_getAdmins() {
  $query = db_select('users', 'u')
        ->fields('u');
  $query->leftJoin('users_roles', 'ur', 'ur.uid = u.uid');
  $query->leftJoin('role', 'r', 'r.rid = ur.rid');
  $query->condition('r.name', 'administrator');
  $admins = $query->execute()->fetchAllAssoc('uid');

  return $admins;
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function may_misc_form_alter(&$form, &$form_state, $form_id) {
  
  //dpm($form_id);dpm($form);
  
  // Unlink Ckeditor from the comment input form.
  /*
  if($form['#id'] == 'comment-form') {
    $form['comment_body']['und'][0]['#type'] = 'textarea';
  }
  */
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $form['body']['und']['0']['#format'] = "full_html";
    //$form['field_custom_php_code']['und']['0']['#format'] = "php_code";
  }
}


/**
 * Implements hook_theme().
 */
function may_misc_theme($existing, $type, $theme, $path) {
  return array(
    'may_misc_submenuSimple' => array(
      'variables' => array('vars' => null),
    ),
    'may_misc_headerLinks' => array(
      'variables' => array('vars' => null),
    ),
    // Fivestar REPLACING theme functions.
    'may_misc_fivestar_static' => array(
      'variables' => array('rating' => NULL, 'stars' => 5, 'tag' => 'vote', 'widget' => array('name' => 'default', 'css' => '')),
    ),
      
    // Altered Tagadelic weighted tag cloud.
    'may_misc_tagadelicWeighted_acceptPredefinedTermsPaths' => array(
      'variables' => array('terms' => array())
    ),
      
    // A bit altered original Theme functions theme_image
    // Here we add an image dimensions if they are not set.
    'may_misc_image' => array(
      'variables' => array(
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),  
      
    // A bit altered original Theme functions theme_image_style
    // Here we add an image dimensions if they are not set.
    'may_misc_image_style' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'width' => NULL,
        'height' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
      ),
    ),
      
  );
}


function theme_may_misc_image_style(array $variables) {
  
  
  // Check if a file exists only for anonymous.
//  global $user;
//  if (!$user->uid && !file_exists($variables['path'])) {
//    return NULL;
//  }
  
  
  if (!empty($variables['src']) && !file_exists(ltrim($variables['src'], '/'))) {
    return NULL;
  }
  
  
  $image_src = image_style_url($variables['style_name'], $variables['path']);
  $image = theme('may_misc_image', array('path' => $image_src, 'source_path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));
        
  return $image;
}


function theme_may_misc_image(array $variables) {
  
//  if (!file_exists(str_replace(array('http://dommoejmechty.com/', '%20'), array('', ' '), $variables['path']))) {
//    return NULL;
//  }
  
  // Make a path relative.
  $variables['path'] = str_replace('http://dommoejmechty.com/', '', $variables['path']);
  $variables['path']= urldecode($variables['path']); // remove %20 (' '), %26 (&), etc

  //dpm('relative = ' . $variables['path']);
  
  if (!may_misc_createCachedImageIfNotExists($variables['path'])) {
    return NULL;
  }
  
  if (!$variables['width']) {
    $size = getimagesize($variables['path']);
    $image = theme('image', array('width' => $size[0], 'height' => $size[1], 'path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));  
  }
  else {
    $image = theme('image', array('width' => $variables['width'], 'height' => $variables['height'], 'path' => $variables['path'], 'alt' =>  $variables['alt'], 'title' => $variables['title'] ));
  }
  
  return $image;
}


/**
 * Theme function that renders the HTML for the tags.
 *
 * @ingroup themable
 */
function theme_may_misc_tagadelicWeighted_acceptPredefinedTermsPaths(array $vars) {
  $terms = $vars['terms'];
  $output = '';

  foreach ($terms as $term) {
    $output .= l($term->name, isset($term->link['href']) ? $term->link['href'] : 'taxonomy/term/' . $term->tid, array(
      'attributes' => array(
        'class' => array("tagadelic", "level" . $term->weight),
        'rel' => 'tag',
        'title'  => $term->description,
        )
      )
    ) . " \n";
  }
  
  
  if(isset($vars['voc'])){
    if (count($terms) >= variable_get('tagadelic_block_tags_' . $vars['voc']->vid, 12)) {
      $output .= theme('more_link', array('title' => t('more tags'), 'url' => "tagadelic/chunk/{$vars['voc']->vid}"));
    }
  }

  return $output;
}
  

/**
 * Simple theming of nested submenu.
 */
function theme_may_misc_headerLinks($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }

  $class = isset($vars['class']) ? $vars['class'] : 'header-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="' . $class . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    
    if ($submenu['link']['link_title'] == 'GooglePlus') {
      $out .= ($count ? $delimiter : '') . '<li>' . l($submenu['link']['link_title'], $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank', 'rel' => 'publisher' ))) . '</li>';
    }
    else {
      $out .= ($count ? $delimiter : '') . '<li>' . l($submenu['link']['link_title'], $submenu['link']['href'], array('attributes' => array('class' => array($submenu['link']['link_title']), 'title' => $submenu['link']['options']['attributes']['title'], 'target' => '_blank' ))) . '</li>';
    }
    
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * Simple theming of nested submenu.
 */
function theme_may_misc_submenuSimple($vars) {
  if(empty($vars['submenu']['below'])) {
    return NULL;
  }
  $level = isset($vars['level']) ? $vars['level'] : 0;
  $class = isset($vars['class']) ? $vars['class'] : 'om-links';
  $delimiter = isset($vars['delimiter']) ? $vars['delimiter'] : '';
  $out = '<ul class="may ' . $class . ' lvl-' . $level . '">';
  $count = 0;
  foreach ($vars['submenu']['below'] as $submenu) {
    if (is_object($submenu)) {
      $submenu = (array) $submenu;
    }
    if (isset($submenu['link']['hidden']) && $submenu['link']['hidden']) {
      continue;
    }
    $out .= ($count ? $delimiter : '') . '<li>';
    if($level) {
      for ($i = 0; $i < $level; $i++ ) {
        $out .= '--';
      }
    }
    $title = t($submenu['link']['link_title']);
    if(isset($submenu['count']) && $submenu['count']) {
      $title .= ' (' . $submenu['count'] . ')';
    }
    // If the field Description has '<nolink>' don't show link for this item
    if(isset($submenu['link']['localized_options']['attributes']['title']) && strtolower($submenu['link']['localized_options']['attributes']['title']) == '<nolink>') {
      $out .= $title;
    }
    else {
      $out .= l($title, $submenu['link']['href']);
    }
    $out .= '</li>';
    if (!empty($submenu['below'])) {
      // Recursion call.
      $out .= '<li>' . theme('may_misc_submenuSimple', array('submenu' => $submenu, 'level' => ($level + 1), 'class' => $class, 'delimiter' => $delimiter )) . '</li>';
    }
    $count++;
  }
  $out .= '</ul>';
  return $out;
}


/**
 * REPLACE FOR ORIGINAL fivestar module theming function. Just to use only its theming functionality.
 * 
 * Display a plain HTML view-only version of the widget with a specified rating.
 *
 * @param $rating
 *   The desired rating to display out of 100 (i.e. 80 is 4 out of 5 stars).
 * @param $stars
 *   The total number of stars this rating is out of.
 * @param $tag
 *   Allows multiple ratings per node.
 * @return
 *   A themed HTML string representing the star widget.
 */
function theme_may_misc_fivestar_static($variables) {
  $rating  = $variables['rating'];
  $stars = $variables['stars'];
  $tag = $variables['tag'];
  $widget = $variables['widget'];

  // GV Intrusion!!!!
  $path = drupal_get_path('module', 'may_misc') . '/css/fivestar';
  drupal_add_css($path . '/css/fivestar.css');
  // END of intrusion.
  
  if($widget['name'] != 'default') {
    // GV changes.
    //drupal_add_css($widget['css']);
    drupal_add_css($path . '/widgets/' . $widget['name'] . '/' . $widget['css']);
  }
  
  $output = '<div class="fivestar fivestar-' . $widget['name'] . '">';
  $output .= '<div class="fivestar-widget-static fivestar-widget-static-'. $tag .' fivestar-widget-static-'. $stars . ' clearfix">';
  if (empty($stars)) {
    $stars = 5;
  }
  $numeric_rating = $rating/(100/$stars);
  for ($n=1; $n <= $stars; $n++) {
    $star_value = ceil((100/$stars) * $n);
    $prev_star_value = ceil((100/$stars) * ($n-1));
    $zebra = ($n % 2 == 0) ? 'even' : 'odd';
    $first = $n == 1 ? ' star-first' : '';
    $last = $n == $stars ? ' star-last' : '';
    $output .= '<div class="star star-'. $n .' star-'. $zebra . $first . $last .'">';
    if ($rating < $star_value && $rating > $prev_star_value) {
      $percent = (($rating - $prev_star_value) / ($star_value - $prev_star_value)) * 100;
      $output .= '<span class="on" style="width: '. $percent .'%">';
    }
    elseif ($rating >= $star_value) {
      $output .= '<span class="on">';
    }
    else {
      $output .= '<span class="off">';
    }
    if ($n == 1)$output .= $numeric_rating;
    $output .= '</span></div>';
  }
  $output .= '</div></div>';
  return $output;
}


/**
 * Implements hook_token_info().
 */
function may_misc_token_info() {
//  // Defines new token 'Provider name' in the node torens group.
//  $info['tokens']['node']['provider-name-for-current-review'] = array(
//    'name' => t('Provider name for a current review'),
//    'description' => t('Name of the provider chosen from a select list or from a custom field if its provided...'),
//  );
//
//  return $info;
}


/**
 * Implements hook_tokens().
 * 
 * Provides token for a current review's provider name. It set to selected from a list or from a manually filled field (if not selected from a list).
 */
function may_misc_tokens($type, $tokens, array $data = array(), array $options = array()) {
//  $replacements = array();
//  $sanitize = !empty($options['sanitize']);
//
//  // Add new token 'provider-name-for-current-review' to a 'node' tokens group.
//  if ($type == 'node' && !empty($data['node'])) {
//    $node = $data['node'];
//
//    foreach ($tokens as $name => $original) {
//      switch ($name) {
//        case 'provider-name-for-current-review':
//          if ($node->type == 'review') {
//            if (isset($node->field_ref_provider['und'][0]['target_id']) && $node->field_ref_provider['und'][0]['target_id']) {
//              
////              $provider_title = db_select('node', 'n')
////                ->fields('n', array('title'))
////                ->condition('nid', $node->field_ref_provider['und'][0]['target_id'])
////                ->execute()->fetchField();
//              
//              
//              $query = db_select('node', 'n');
//              $query->join('field_data_field_p_name', 'pn', "pn.entity_id = n.nid"); // inner_join file_usage table against file_managed
//              //$query->fields('n', array('nid', 'title'))  // specifying fields from file_usage table
//              $query->fields('pn', array('field_p_name_value')) // specifying fields from file_managed table
//                    ->condition('nid', $node->field_ref_provider['und'][0]['target_id']);
//              
//              $provider_title = $query->execute()->fetchField();
//              
//              
//              
//              
//              
//              $replacements[$original] = $provider_title;
//            }
//            else {
//              $replacements[$original] = check_plain($node->field_r_oprovider['und'][0]['value']);
//            }
//
//          }
//          
//          break;
//      }
//    }
//  }
//  
//  return $replacements;
}


/**
 * Returns preface node by key.
 */
function may_misc_getPrefaceByKey($key) {
    
    $preface_node = NULL;
    
    $query = db_select('node', 'n');
    $query->join('field_data_field_preface_key', 'pk', "pk.entity_id = n.nid"); 
    $query->fields('n', array('nid'))  
          //->fields('pn', array('field_preface_key_value')) 
          ->condition('n.type', 'preface')
          ->condition('pk.field_preface_key_value', $key); 
    $preface_nid = $query->execute()->fetchField(); 
    if ($preface_nid) {
      $preface_node = node_load($preface_nid);
    }
    return $preface_node;
}
  

/**
 * Forms API validation function for email.
 */
function wdg_misc_elementValidate_email($element, &$form_state) {
  if (!valid_email_address($element['#value'])) {
    form_error($element, t('Please enter a valid email address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}  


/**
 * Forms API validation function for url.
 */
function wdg_misc_elementValidate_url($element, &$form_state) {
  if (!valid_url($element['#value'])) {
    form_error($element, t('Please enter a valid url address.'));
  }
//  if (empty($element['#value'])) {
//    form_error($element, t('This field is required.'));
//  }
}


/**
 * Helper function for sorting by weight with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_weight, 'wdg_misc_sortArrayByWeight');
 */
function wdg_misc_sortArrayByWeight($a, $b) 
{
    if ($a['weight'] == $b['weight']) {
        return 0;
    }
    return ($a['weight'] < $b['weight']) ? -1 : 1;
}



/**
 * Socialite social buttons.
 */
function may_blocks_getSocialiteButtons($url = NULL, $title = NULL) {

  if (!$url) {
    $url = 'http://dommoejmechty.com' . ($_GET['q'] == 'home' ? '' : $_SERVER['REQUEST_URI']);
  }
  
  drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.min.js');
  //drupal_add_js('sites/all/libraries/jquery.plugins/socialite/socialite.js');
  
  $path_to_custom_js = drupal_get_path('module', 'may_misc') . '/js/';
  drupal_add_js($path_to_custom_js . 'addSocialite.js');
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . $url . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . $url . '&amp;t=' . $title . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . $url . '&amp;title=' . $title . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url . '&t=' . $title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url . '&title=' . $title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
  
  // Horizontal
  /*
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="horizontal" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="medium" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url) . '&amp;t=' . urlencode($title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="button_count" data-width="60" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url) .  '&amp;title=' . urlencode($title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="right" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  */
  
  // Vertical
  $out = '
  <ul class="social-buttons cf">
			<li><a href="http://twitter.com/share" class="socialite twitter-share" data-text="' . $title . '" data-url="' . $url . '" data-count="vertical" rel="nofollow" target="_blank"><span class="vhidden">Share on Twitter</span></a></li>
			<li><a href="https://plus.google.com/share?' . 'url=' . urlencode($url) . '" class="socialite googleplus-one" data-size="tall" data-href="' . $url . '" rel="nofollow" target="_blank"><span class="vhidden">Share on Google+</span></a></li>
			<li><a href="http://www.facebook.com/sharer.php?' . 'u=' . urlencode($url . '&t=' . $title) . '" class="socialite facebook-like" data-href="' . $url . '" data-send="false" data-layout="box_count" data-width="70" data-show-faces="false" rel="nofollow" target="_blank"><span class="vhidden">Share on Facebook</span></a></li>
			<li><a href="http://www.linkedin.com/shareArticle?' . 'mini=true&amp;url=' . urlencode($url . '&title=' . $title) . '" class="socialite linkedin-share" data-url="' . $url . '" data-counter="top" rel="nofollow" target="_blank"><span class="vhidden">Share on LinkedIn</span></a></li>
		</ul>
  ';
  

  
  
  return $out;
}


/**
 * AddThis social Like buttons set.
 */
function may_blocks_getAddThisButtonsLike() {

  $out = '
    <!-- AddThis Button BEGIN -->
  <div class="addthis_toolbox addthis_default_style ">
  <a class="addthis_button_linkedin_counter"></a>
  <a class="addthis_button_google_plusone" g:plusone:size="medium"></a>
  <a class="addthis_button_facebook_like" fb:like:layout="button_count" fb:like:locale="en_US"></a>
  <a class="addthis_button_tweet"></a>
  </div>
  <script type="text/javascript">var addthis_config = {"data_track_addressbar":true, ui_language:"en", locale:"en_US"};</script>
  <script type="text/javascript" src="http://s7.addthis.com/js/250/addthis_widget.js#pubid=ra-50253baf64925d35"></script>
  <!-- AddThis Button END -->
  ';
  
  return $out;
}


/**
 * Element Validate for email.
 */
function may_misc_validate_email($element, &$form_state) {
   if (!preg_match('/^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$/', $element['#value'])) {
     form_error($element, 'Wrong email format!');
   }
}
