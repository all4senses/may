<?php

/**
 * @file
 * Module contained miscelanious helper functions and hooks.
 */


/**
 * Constants for ratins titles, etc.
 */
//module_load_include('inc', 'may_misc', 'inc/constants');


/**
 * Implements hook_menu().
 */
function may_misc_menu() {
  $items['test'] = array(
    'title' => 'Test page',
    'page callback' => 'may_misc_testPage',
    //'access arguments' => array('administer content'),
    'access arguments' => array('administer taxonomy'), 
    'type' => MENU_CALLBACK,
  );
 
  return $items;
}


/**
 * Test page function for url /test. 
 */
function may_misc_testPage() {
  $out = '<div>Start test...</div>';

  
    $query = NULL;
    $access_token = 'xxx';
    if (isset($_GET['led1'])) {
      $led1 = $_GET['led1'];
      //$query = urlencode('led1=' . $led1);
      $query = 'led1=' . $led1;
    }
    
    //$server = 'http://94.180.46.64/'; dynamic outer ip (of router)
    $server = 'http://all4senses.mooo.com/'; // afraid.org free dns with local installed afraid.org dns swithcer agent
    $url = $server . '?'
            . $query
            . ($query ? '&' : '') . 'access=' . $access_token;

    dpm($url);
    
    $connected = FALSE;
    if($result = may_misc_curlGET($url)) {
      
      //dpm($result);
      //$result = str_replace(array('"', "'"), array("'", '"'), $result);
      
      $data = json_decode($result,true);
      if (is_array($data)) {
        $connected = TRUE;
        $out .= '<style>
                  .button {width: 100px; height: 100px;}
                  .lamp {width: 100px; height: 20px;}
                  .on {background: green;}
                  .off {background: red;}
                </style>';
        $led1 = $data['led1'];
        $led1_state = $led1 ? 'on' : 'off';
        $led1_action = $led1 ? '0' : '1';
        $out .= '<div>Переключатель Ардуино</div><a href="?led1=' . $led1_action . '"><div class="button ' . $led1_state . '"></div></a>';
        
        $out .= '<div>На самом деле лампочка ' . ($data['led1_on'] > 500 ? 'включена' : 'выключена') . '</div><div class="lamp ' . ($data['led1_on'] > 500 ? 'on' : 'off') . '"></div>';
      }
    }
    
  if (!$connected) {
    $out .= 'No connection with the Smart Server';
  }
  elseif (@$data['access'] == 'denied') {
    $out .= 'Access denied!';
  }
  
  dpm($result);
  
  //$out .= 'yyy' . $result;
  
  return $out . '<br>End of Test';
}




/**
 * 
 * User permissions access calback function for the admin.
 * 
 */
function may_misc_userIsAdmin() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}


/**
 * Implements a new view_mode.
 */
function may_misc_entity_info_alter(&$entity_info) {
//  $entity_info['node']['view modes']['home_teaser'] = array(
//    'label' => t('Home teaser'),
//    'custom settings' => TRUE,
//  );
}
 

/**
 * Return trimmed teaser with right size (cleared from images) and with separated a styled image, cutted off from the body.
 */
function may_misc_getImagesFromBody($body_full_markup, $nid = NULL) {
 
  $matches = NULL;
  $found_image = NULL;
  
  $images = NULL;
  
  // Search for all images.
  if (preg_match_all('/<img[^>]+>/i', $body_full_markup, $matches)) {
    $found_image = TRUE;
    //dpm($matches);
    $images_style = 'medium';
    foreach ($matches[0] as $i) {
      preg_match_all('/(alt|title|src)="([^"]*)"/i',$i, $matches2);
      //dpm($matches2);
      foreach ($matches2[1] as $index => $key) {
        $image[$key] = $matches2[2][$index];
      }

      $image['src'] = urldecode($image['src']); //str_replace('%20', ' ', $main_image['src']);
      $image['uri'] = may_misc_getStreamUriFromRelativePath($image['src']);
      //$main_image['uri'] = $stream_path;

      $image['image_html'] = theme('image_style', array( 'path' => $image['uri'], 'style_name' => $images_style));
      //$main_image_html = '<div>' . $main_image_html;
      $images[] = $image;
    }
  }

  return $images;
}


/**
 * Return trimmed teaser with right size (cleared from images) and with separated a styled image, cutted off from the body.
 */
function may_misc_getArticleTeaserData($target, $body_full_markup, $nid, $characters_num = NULL, $only_teaser = FALSE) {
 
  $main_image = NULL;
  $main_image_html = NULL;
  $side_block_image_html = NULL;
  $matches = NULL;
  $found_image = NULL;
  
  
  
  // Search for all images.
  if (preg_match_all('/<img[^>]+>/i', $body_full_markup, $matches)) {
    $found_image = TRUE;
    //dpm($matches);
    $images_style = 'medium';
    foreach ($matches[0] as $i) {
      preg_match_all('/(alt|title|src)="([^"]*)"/i',$i, $matches2);
      //dpm($matches2);
      foreach ($matches2[1] as $index => $key) {
        $image[$key] = $matches2[2][$index];
      }

      $image['src'] = urldecode($image['src']); //str_replace('%20', ' ', $main_image['src']);
      $stream_path = may_misc_getStreamUriFromRelativePath($image['src']);
      //$main_image['uri'] = $stream_path;

      $image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $images_style));
      //$main_image_html = '<div>' . $main_image_html;
      $images[] = array('image_html' => $image_html, 'src' => $image['src'], 'stream_path' => $stream_path);
    }
  }
  
  if (preg_match('/<img[^>]+>/i', $body_full_markup, $matches)) {
    $found_image = TRUE;
    preg_match_all('/(alt|title|src)="([^"]*)"/i',$matches[0], $matches);
    foreach ($matches[1] as $index => $key) {
      $main_image[$key] = $matches[2][$index];
    }
    $body_full_markup = preg_replace('/<img[^>]+>/i', '', $body_full_markup);
  }
  elseif (preg_match('/\[video:.*v=(.*)\]/i', $body_full_markup, $matches)) {
    // [video: https://www.youtube.com/watch?v=H1vdPJzzzAY]
    $video_id = $matches[1];
    if($main_image['src'] = may_misc_getYoutubeVideoThumb($video_id)) {
      $found_image = TRUE;
    }
    $body_full_markup = preg_replace('|\[video:.*(http.*)\]|', '<a href="$1"> [Watch a video] </a>', $body_full_markup);
  }
  
  
  if ($found_image) {

    $main_image['src'] = urldecode($main_image['src']); //str_replace('%20', ' ', $main_image['src']);
    $stream_path = may_misc_getStreamUriFromRelativePath($main_image['src']);
    $main_image['uri'] = $stream_path;
    
    $image_size = getimagesize(ltrim($main_image['src'], '/'));

    // Scale and cut.
    /*
    if ($image_size[0] / $image_size[1] > 1.5) {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_h'));
    }
    else {
      $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_v'));
    }
    */
    // Scale only.
    if ($image_size[0] / $image_size[1] > 1) {
      $style_name = 'article_thumbnail_h';
      ////$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
      //$main_image['src_themed'] = image_style_url($style_name, $stream_path);
    }
    else {
      $style_name = 'article_thumbnail_v';
      ////$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
      //$main_image['src_themed'] = image_style_url($style_name, $stream_path);
    }
    
    $main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => $style_name));
    $main_image_html = '<div class="thumb">' . $main_image_html . '</div>';
    
    $side_block_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail_side_block'));
    $side_block_image_html = '<div class="thumb">' . $side_block_image_html . '</div>';
  
    
    // Image for sharing.
    if ($image_size[0] / $image_size[1] > 1) {
      // Too wide. will not be cutted.
      $style_name_share = 'share_wide';
      //$main_image['src_themed'] = image_style_url('share_wide', $stream_path);
    }
    elseif ($image_size[1] / $image_size[0] < 1) {
      // Too tall. will not be cutted.
      $style_name_share = 'share_tall';
      //$main_image['src_themed'] = image_style_url('share_tall', $stream_path);
    }
    else {
      //Normal image, will not be cutted.
      $style_name_share = 'share';
      //$main_image['src_themed'] = image_style_url('share', $stream_path);
    }
    $main_image['src_themed'] = image_style_url($style_name_share, $stream_path);
    
    
    //$main_image_html = theme('image_style', array( 'path' => $stream_path, 'style_name' => 'article_thumbnail'));
    
    // Clear existing image_cached files.
    $default_file_path = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/files');
    $styles_to_delete = array($style_name, $style_name_share, 'block_thumb');
    foreach ($styles_to_delete as $style_to_delete) {
      $to_delete = str_replace($default_file_path, $default_file_path . '/styles/' . $style_to_delete . '/public' , $main_image['src']);
      if (file_exists($to_delete)) {
        unlink($to_delete);
      } 
    }
      
    
  } // End of if ($found_image) {

  $teaser = strip_tags($body_full_markup);
  
  
  if (!$characters_num) {
    if ($main_image_html) {
      $characters_num = 130;
    }
    else {
      $characters_num = 250;
    }
  }
  
  $teaser_block = trim(drupal_substr($teaser, 0, 200));// . '...';
  $last_pos = strrpos($teaser_block, ' ');
  $teaser_block = substr_replace ($teaser_block, '...', $last_pos);
  
  $teaser_home = trim(drupal_substr($teaser, 0, 200));// . '...';
  $last_pos = strrpos($teaser_home, ' ');
  $teaser_home = substr_replace ($teaser_home, '...', $last_pos);
  
//  if ($found_image) {
//    $teaser_side_block_chars = 75;
//  }
//  else 
  {
    $teaser_side_block_chars = 85;
  }
  $teaser_side_block = trim(drupal_substr($teaser, 0, $teaser_side_block_chars));
  $last_pos = strrpos($teaser_side_block, ' ');
  $teaser_side_block = '<div class="teaser-content">' . substr_replace ($teaser_side_block, '...' . l('Read more', 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos) . '</div>';
  
  
  // $teaser = text_summary($body_full_markup, 'full_html', $characters_num);
  $teaser = trim(drupal_substr($teaser, 0, $characters_num));
  
  
  // Replace the last word with ...
  // preg_match('/^.*\s(.*)$/i', trim(strip_tags($teaser)), $matches);
  // $last_pos = strrpos($teaser, $matches[1]);
  $last_pos = strrpos($teaser, ' ');
  
  // $teaser = substr_replace ($teaser, '...' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more')))) , $last_pos, strlen($matches[1]));
  $teaser = substr_replace ($teaser, '... ' . l(t('Read More'), 'node/' . $nid, array('attributes' => array('class' => array('more')))), $last_pos);

  if ($only_teaser) {
    return $main_image_html . $teaser;
  }
  else {
    return array('images' => $images, 'teaser_only' => $teaser, 'teaser_side_block' => $teaser_side_block, 'teaser' => $main_image_html . $teaser, 'teaser_block' => $teaser_block, 'teaser_home' => $main_image_html . $teaser_home, 'main_image' => $main_image, 'main_image_html' => $main_image_html, 'side_block_main_image' => $side_block_image_html);
  }
  
}


/**
 * Rewrite links like /f/pdfs/ to alias /pdfs/ (forward) and vise versa and others.
 */
function may_misc_rewriteLinks($type, $data, $direction = 'forward') {
  switch ($type) {
    case 'pdfs':
      if ($direction == 'forward') {
        // Converts from /f/pdfs/ to /pdfs/
        // the real path will be accessible with .htaccess mod_rewrite settings in the root of the site.

        // $body = $form_state['values']['body'];
        $body = $data['values']['body'];
        $count1 = $count2 = 0;
        if ($body['und'][0]['value']) {
          $body['und'][0]['value'] = preg_replace('|"/f/pdfs|', '"/pdfs', $body['und'][0]['value'], -1, $count1);
        }
        if ($body['und'][0]['summary']) {
          $body['und'][0]['summary'] = preg_replace('|/f/pdfs|', '"/pdfs', $body['und'][0]['summary'], -1, $count2);
        }
        if ($count1 + $count2 > 0) {
          return $body;
        }
      }
      else {
        // Converts from /pdfs/ to /f/pdfs/

        // $body = $form['body']
        $body = $data['body'];
        if ($body['und'][0]['#default_value']) {
          $body['und'][0]['#default_value'] = preg_replace('|"/pdfs|', '"/f/pdfs', $body['und'][0]['#default_value'], -1);
        }
        if ($body['und'][0]['summary']['#default_value']) {
          $body['und'][0]['summary']['#default_value'] = preg_replace('|"/pdfs|', '"/f/pdfs', $body['und'][0]['summary']['#default_value'], -1);
        }
        return $body;
      }
      break;
  }
  return NULL;
}


/**
 * Convert path from Drupal stream uri.
 */
function may_misc_getPathFromStreamUri($uri) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');
  
  return $default_file_path . str_replace($file_default_scheme . ':/', '', $uri);
}


/**
 * Convert a relative or absolute path to Drupal stream uri.
 */
function may_misc_getStreamUriFromRelativePath($path) {
  $file_default_scheme = file_default_scheme();
  $default_file_path = variable_get('file_' . $file_default_scheme . '_path', conf_path() . '/files');

  $stream_path = str_replace('http://m-a-y.ru', '', $path);
  $stream_path = ltrim($stream_path, '/');
  return $file_default_scheme . '://' . str_replace($default_file_path . '/', '', $stream_path);
}


/**
 * Adds js to a page for making all images zoomable.
 */
function may_misc_addZoomableImagesJs() {
  //1, 3, 4, 
  drupal_add_js('sites/all/libraries/jquery.plugins/colorbox/colorbox/jquery.colorbox.js');
  drupal_add_css('sites/all/libraries/jquery.plugins/colorbox/example1/colorbox.css', array('preprocess' => FALSE)); // array('group' => CSS_THEME, 'preprocess' => FALSE)

  $path_to_module = drupal_get_path('module', 'may_misc');
  drupal_add_js($path_to_module . '/js/may_makeImagesZoomable.js');
}


/**
 * Helper function to add metatag to a current page.
 */
function may_misc_addMetatag($name, $content, $href = NULL, $weight = 'NA') {
  if ($content) {
    if ($name == 'title') {
      //dpm($content);
      //$content = str_replace('| GetVoIP', '', $content);
      drupal_set_title($content);
    }
    else {
      $meta = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'name' => $name,
            'content' => $content,
        )
      );
      if ($weight != 'NA') {
        $meta['#weight'] = $weight;
      }
      drupal_add_html_head($meta, $name);
    }
  } // End of if ($content) {
  elseif($href) {
    $meta = array(
      '#tag' => 'link',
      '#attributes' => array(
          'rel' => $name,
          'href' => $href,
      )
    );
    if ($weight != 'NA') {
      $meta['#weight'] = $weight;
    }
    drupal_add_html_head($meta, $name);
  } // End of elseif($href) {
}


/**
 * Helper function to add sharing data (metatags and links) to a current page.
 */
function may_misc_addSocialShareData_toPage($node) {
  
  global $schema_org_type;
  $image = NULL;
  $og_type = NULL;
  $title = NULL;
  $description = NULL;
  $tags = array();
  
  //$title = $node->title;
  if (@$node->field_preface_key['und'][0]['value'] == 'front') {
    
    $title = may_misc_metatag_getFrontTitle();
    
    $tags = array(
      
      // Add all rss feeds to the home page (exceot the main rss, which will be added to all pages).
      'blog_rss' => array(
        '#tag' => 'link', 
        '#attributes' => array( 
            'rel' => 'alternate',
            'type' => 'application/rss+xml',
            'title' => 'May Blog',
            'href' => 'http://dommoejmechty.com/blog/rss.xml',
        ),
      ),
        
    );
    
  }
  if (!$title) {
    if (isset($node->metatags['title']['value']) && $node->metatags['title']['value']) {
      $title = $node->metatags['title']['value'];
    }
    else {
      $title = $node->title;
      
      //Set the right title metatag for the page if it's not defined.
      if (isset($node->metatags['title']['value'])) {

          $global_metatags_config = metatag_config_load('node:' . $node->type);
          // Use the upper level config if it's not defined for a specific content type.
          if (!$global_metatags_config || empty($global_metatags_config->config['title']['value'])) {
            $global_metatags_config = metatag_config_load('node');
          }
          
          if (!empty($global_metatags_config->config['title']['value'])) {
            global $language;
            global $altered_head_title;
            $altered_head_title = token_replace($global_metatags_config->config['title']['value'], array('node' => $node), array('language' => $language, 'sanitize' => FALSE));
            may_misc_addMetatag('title', $altered_head_title);
          }

      }
      
      
    }
  }

  
  
  switch ($node->type) {
    case 'blog_post':
    case 'news_post':
    case 'article':
      if (isset($node->field_main_image['und'][0]['value']) && $node->field_main_image['und'][0]['value']) {
        $image = unserialize($node->field_main_image['und'][0]['value']);
        if (isset($image['src_themed']) && $image['src_themed']) {
          $image = $image['src_themed'];
        }
        elseif (isset($image['src']) && $image['src']) {
          $image = $image['src'];
        }
        else {
          $image = NULL;
        }
      }
    
      /*
      if (!@$node->metatags['description']['value']) {
        $description = $title . '...';
      }
      */
      
      $og_type = 'article';
      $schema_org_type = 'Article';
      
      break;
     
    
  }
  
  $title = token_replace($title);
  
  
  if (!$image){
    // Show default image - the logo.
    $image = '/sites/all/themes/may/css/images/may-logo-t.png';
  }

  if (!strpos($image, '//dommoejmechty.com')) {
    $image = 'http://dommoejmechty.com/' . ltrim($image, '/');
  }

  $tags += array(
       /*
      'title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'title',
              'content' => "Video '" . $node->title . "' by " . $publisher_title,
          ),
      ),
      'DC.title' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'DC.title',
              'content' => $node->title,
          ),
      ),
      'description' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => (isset($node->body['und'][0]['summary']) AND $node->body['und'][0]['summary'])?$node->body['und'][0]['summary']:drupal_substr(strip_tags($node->body['und'][0]['value']), 0, 200) . '...',
          ),
      ),
      'author' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'author',
              'content' => $publisher_title,
          ),
      ),



      'medium' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'medium',
              'content' => 'video',
          ),
      ),

      'video_type' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_type',
              'content' => 'application/x-shockwave-flash',
          ),
      ),

      'video_height' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '300',
          ),
      ),

      'video_width' => array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'video_height',
              'content' => '500',
          ),
      ),


      'video_src' => array(
          '#tag' => 'link', // The #tag is the html tag - <link />
          '#attributes' => array( 
              'href' => 'http://ripplin.com/sites/all/libraries/flowplayer/flowplayer-3.2.8.swf?config=' . urlencode('http://ripplin.com/video-src?v=' . $node->nid),
              'rel' => 'video_src',
          ),
      ),
      */
  
  
/*      
      'fb:admins' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'fb:admins',
          'content' => 'http://www.facebook.com/getvoipservice',
      ),
    ),
*/
    // Title for Facebook.
    'og:title' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:title',
          'content' => $title,
      ),
    ),
      
    // Title for G+.
    'name' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'name',
          'content' => $title,
      ),
    ),
      
    'image_src' => array(
      '#tag' => 'link', // The #tag is the html tag - <link />
      '#attributes' => array( 
          'href' => $image,
          'rel' => 'image_src',
          //'type' => 'text/css',
      ),
    ),
  
    // For Facebook.
    'og:image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'property' => 'og:image',
          'content' => $image,
      ),
    ),
      
    // For G+.  
    'image' => array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
          'itemprop' => 'image',
          'content' => $image,
      ),
    ),
      
      
      
    // Add main rss feed to every page.
    'main_rss' => array(
      '#tag' => 'link', 
      '#attributes' => array( 
          'rel' => 'alternate',
          'type' => 'application/rss+xml',
          'title' => 'Latest Articles from May',
          'href' => 'http://dommoejmechty.com/rss.xml',
      ),
    ),
      
  );

  /*  
  if ($description) {
    
    $tags['description'] = array(
          '#tag' => 'meta',
          '#attributes' => array(
              'name' => 'description',
              'content' => $description,
          ),
      );
  }
  */
  
  if ($og_type) {
   
    $tags['og:type'] = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'property' => 'og:type',
            'content' => $og_type,
        ),
    );
  }
  
  
        
  foreach ($tags as $key => $val)
      drupal_add_html_head($val, $key);
        
}


/**
 * Get img src for Share from Uri.
 */
function may_misc_getShareSrcThemed_fromUri($uri) {
  
  // Define share pic.
  $image_size = getimagesize(ltrim(may_misc_getPathFromStreamUri($uri), '/'));
  // Image for sharing.
  if ($image_size[0] / $image_size[1] > 1) {
    // Too wide. will not be cutted.
    $out = image_style_url('share_wide', $uri);
  }
  elseif ($image_size[1] / $image_size[0] < 1) {
    // Too tall. will not be cutted.
    $out = image_style_url('share_tall', $uri);
  }
  else {
    //Normal image, will not be cutted.
    $out = image_style_url('share', $uri);
  }
  
  return $out;
}


/**
 * Creates imagecache image if it doesnt exist.
 */
function may_misc_createCachedImageIfNotExists($relative_path, $style_name = NULL) {
  // Assure that the imagecache file is created already, or recreate it.
  if (!file_exists($relative_path)) {
    
    // Find out the style name from 'f/styles/logo_provider_chart_main/public/p/logos/Nextiva-Logo2.png';
    if (!$style_name) {
      $path_part = explode('/styles/', $relative_path);
      $path_part = explode('/public/', $path_part[1]);
      $style_name = $path_part[0];
    }
    $style = image_style_load($style_name);
    //$styled_file_path = 'f/styles/logo_provider_chart_main/public/p/logos/Nextiva-Logo2.png';
    //$original_file_path = 'f/p/logos/Nextiva-Logo.png';
    $file_path = str_replace('styles/' . $style_name . '/public/', '', $relative_path);
    $source = may_misc_getStreamUriFromRelativePath($file_path);
    $destination = image_style_path($style_name, $source);
    if (!image_style_create_derivative($style, $source, $destination)) {
      return FALSE;
    }
  }
  
  return TRUE;
}



/**
 * Helper function for sorting by weight with uasort function.
 * 
 * Example of using:
 * 
 * uasort($array_with_elements_contained_key_weight, 'wdg_misc_sortArrayByWeight');
 */
function wdg_misc_sortArrayByWeight($a, $b) 
{
    if ($a['weight'] == $b['weight']) {
        return 0;
    }
    return ($a['weight'] < $b['weight']) ? -1 : 1;
}
