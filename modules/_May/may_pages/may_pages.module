<?php

/**
 * @file
 * Module for building and managing site's pages.
 */

/**
 * Constants for ratins titles, etc.
 */
module_load_include('inc', 'may_misc', 'inc/constants');


/**
 * Implements hook_menu().
 */
function may_pages_menu() {

//  $items['home'] = array(
//    'title' => 'Home page',
//    'page callback' => 'may_pages_buildHome',
//    'access arguments' => array('access content'),  
//    'type' => MENU_CALLBACK,
//  );
  
  $items['sh'] = array(
    'title' => 'Sh1',
    'page callback' => 'may_pages_sh1',
    'access callback' => 'may_misc_userIsAdmin',
    'type' => MENU_CALLBACK,
  );
  
  $items['sh-get'] = array(
    'title' => 'Sh Get',
    'page callback' => 'may_pages_sh_get',
    'access callback' => 'may_misc_userIsAdmin',
    'type' => MENU_CALLBACK,
  );
   
  return $items;
}



/**
 * Returns a block with a cloud of all tags of s specific content type.
 */
function may_pages_buildTopicsPage($content_type_label) {
  
  global $language;
  global $user;
  
  //$content_types = array('blog_post' => 'blog', 'news_post' => 'news', 'article' => 'articles');
  // Inverted...
  $content_types = array('blog' => 'blog_post', 'news' => 'news_post', 'articles' => 'article');
  $content_type = $content_types[$content_type_label];
  
  // Uncomment to use a cache.
  //$tags = cache_get($content_type . '_tags_page' . $language->language);
  
  // Comment to use a cache.
  if (1) { 
    
  // Uncomment to use a cache.
  //if (!$tags || empty($tags->data) || $tags->expire < time()) {
    
    $tags_array = may_misc_getTopics($content_type, $content_type_label);

    if (!$tags_array) {
      return NULL;
    }
    
    // Simple List.
    // $tags = theme('may_misc_submenuSimple', array('submenu' => array('below' => $tags_array), 'class' => 'tags'));
    // Tag cloud.
    $tags_array = tagadelic_sort_tags(tagadelic_build_weighted_tags($tags_array, 12));
    $tags = theme('may_misc_tagadelicWeighted_acceptPredefinedTermsPaths', array('terms' => $tags_array));
  

    //$page_title = '<h1 id="page-title" class="title">' . drupal_ucfirst($content_type_label) . ' tags</h1>';
    $show_all_url = '<div class="more-link">' . l('Show all posts', $content_type_label) . '</div>';
    $tags = /*$page_title .*/ $tags . $show_all_url;
    // Expire = current time + 4 hours.
   
    // Uncomment to use a cache.
    // cache_set($content_type . '_tags_page' . $language->language, $tags, 'cache', time() + 14400);
    
  }
  else {
    $tags = $tags->data;
  }
  
  /*
  if ($preface = may_misc_getPrefaceByKey($content_type_label . '_tags') ) {
    //dpm($preface);
    //drupal_set_title($preface->title);
    if (isset($preface->metatags['title']['value']) && $preface->metatags['title']['value']) {
      drupal_set_title($preface->metatags['title']['value']);
    }
    else {
      drupal_set_title($preface->title);
    }
    
    $preface->title_no_link = TRUE;
    $preface = render(node_view($preface, 'full'));
  }
  return '<div class="tags">' . $preface . $topics . '</div>'; 
  */
  
  return ($user->uid ? '<div class="tags-admin-link">' . l(ucfirst($content_type_label) . ' tags Admin page', $content_type_label . '/tags-admin') . '</div>' : '') . '<div class="tags">' . $tags . '</div>'; 
}


/**
 * Implements hook_access().
 */
function may_pages_access($type = null) {
  switch ($type) {
    default:
      if (arg(1) == 'edit') {
        if(!user_access('administer site configuration')) {
          return false;
        }
      }
    break;
  }
  return true;
}


/**
 * Prepare data for output it via theme function
 */
function may_pages_buildHome($name, $data) {
  $out = '';
  
  $seo_welcome_node = may_misc_getPrefaceByKey('front');
  $seo_welcome_node->title_no_link = TRUE;
  $seo_welcome_node_view = node_view($seo_welcome_node, 'full');

  $out .= render($seo_welcome_node_view);


    $block_data = array('module' => 'views', 'delta' => 'providers-block_top_business_cmp', 'shadow' => FALSE);
    $out .= may_blocks_getBlockThemed($block_data);
  
  // Get block for Top pick residential providers.
  $block_data = array('module' => 'views', 'delta' => 'providers-block_1', 'shadow' => FALSE); 
  $out .= may_blocks_getBlockThemed($block_data);

    $out .= render($seo_welcome_node_view['field_preface_bottom']);

  return $out;
}


/**
 * Implements hook_form_alter().
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.
 *
 * @param string $form_id
 *   Form ID.
 *
 * @return void
 *   Return nothing.
 */
function may_pages_form_alter(&$form, &$form_state, $form_id) {
  
   //dpm($form_id);  dpm($form);
  // $conf['locale_custom_strings_en']['old string'] = 'new string'
  
  switch ($form_id) {
    
    case 'user_login_block':
    case 'user_login':
      
      // Disable login for disabled users
      $form['#validate'][] = 'may_pages_validateForm_disableUserLoginForDisabled';
                
      break;
    

    
    case 'article_node_form':
      
        $extra_data = unserialize($form['field_extra_data']['und'][0]['value']['#default_value']);
        
        $form['author']['guest_author'] = array(
          '#type' => 'textfield',
          '#title' => 'Guest Post author',
          '#default_value' => !empty($extra_data['guest_author']) ? $extra_data['guest_author'] : '',
        );
        
        
        // Restore aliased pdfs links, from /pdfs/ to /sites/default/files/pdfs/
        $form['body'] = may_misc_rewriteLinks('pdfs', $form, 'back');
        
      
        //$form['field_a_teaser']['und'][0]['#format'] = 'full_html';
        $form['field_a_teaser']['#access'] = FALSE;
        $form['field_main_image']['#access'] = FALSE;
        $form['field_extra_data']['#access'] = FALSE;
        
        $form['#validate'][] = 'may_pages_validateForm_article';
                
      break;
    
    
    
    
    case 'project_node_form':
        
        // Restore aliased pdfs links, from /pdfs/ to /sites/default/files/pdfs/
        //$form['body'] = may_misc_rewriteLinks('pdfs', $form, 'back');
        
      
        //$form['field_a_teaser']['und'][0]['#format'] = 'full_html';
        //$form['field_a_teaser']['#access'] = FALSE;
        //$form['field_main_image']['#access'] = FALSE;
        $form['field_extra_data']['#access'] = FALSE;
        
        $form['#validate'][] = 'may_pages_validateForm_project';
        //dpm($form);
                
      break;
    
    
    
    
    case 'user_profile_form':
      
      // Disallow edit own profile for a Guest user.
      global $user;
      if($user->name == 'guest') {
        drupal_goto('');
      }
      
      $form['field_u_bio']['und'][0]['#format'] = 'full_html';
      
      break;
    
    
    
  
       
    case 'preface_node_form':
/* 
      // Deny editing titles for everyone except the root.
      if(arg(1) != 'add') {
        global $user;
        if($user->uid == 1) {
          $form['title'] = array(
            '#type' => 'item',
            '#title' => t('Title'),
            '#markup' => '<div class="title">' . $form['title']['#default_value'] . '</div>',
            '#description' => t('This field can be edited only by the Root administrator. Used only as id for loading to the listing page and will be hidden on the page.'),
          );
        }
      } // End of if(arg(1) != 'add') {
*/    
      
      
      // Hide some options for all.
      $form['comment_settings']['#access'] = FALSE;
      $form['revision_information']['#access'] = FALSE;
      
      // And leave some options for the root.
      global $user;
      if ($user->uid != 1) {
        $form['field_preface_key']['#access'] = FALSE;
      }
      if (!in_array('administrator', $user->roles)) {
        // Deny to change the status of the node (it should always be unpublished).
        $form['options']['#access'] = FALSE;
        // Hide url aliasing options.
        $form['path']['#access'] = FALSE;
      }
      
      
      // Connect Ckeditor for additional fields.
      
      //$form['body']['und'][0]['#format'] = 'may_full_html'; // link
      //$form['body']['und'][0]['#format'] = 'filtered_html'; // unlink
      $keys = element_children($form['field_preface_bottom']['und']);
      foreach ($keys as $key) {
        $form['field_preface_bottom']['und'][$key]['field_preface_b_body']['und'][0]['#format'] = 'full_html'; // link Ckeditor
      }
      
    break; // End of case 'preface_node_form':

    
  } // End of switch ($form_id) {
  
  
  // Add a Save Draft button.
  switch ($form_id) {
    
    case 'blog_post_node_form':
    case 'article_node_form':
      
        $form['actions']['save_draft'] = array(
          '#type' => 'submit',
          '#value' => 'Save Draft',
          '#submit' => array('node_form_submit'),
          '#weight' => 6,
        );
      
        $form['#submit'][] = 'may_pages_submitForm_saveDraft';
        
        break;
      
  } // End of switch ($form_id) { // Save Draft button
  
}


/**
 * Disable user login for disabled users.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function may_pages_validateForm_disableUserLoginForDisabled(&$form, &$form_state) {
  
  //dpm($form_state); dpm($form);
  
  if (!empty($form_state['uid']) && $u = user_load($form_state['uid'])) {
    if (in_array('disabled', $u->roles)) {
      form_set_error('name',t('Sorry, but Your account is blocked. Please contact administrator to unblock it.'));
    }
  }
}


/**
 * Custom validate of project type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function may_pages_validateForm_project(&$form, &$form_state) {

  $extra_data = array(
    'title' => $form_state['values']['title'], 
    'images' => may_misc_getImagesFromBody($form_state['values']['body']['und'][0]['value'], $form_state['values']['nid']), 
  );
  
  form_set_value($form['field_extra_data'], array('und' => array(0 => array('value' => serialize($extra_data), 'format' => 'full_html') )), $form_state);
}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function may_pages_validateForm_article(&$form, &$form_state) {

  // Define a main image and build a custom teaser.
  $teaser_data = may_misc_getArticleTeaserData('all', $form_state['values']['body']['und'][0]['value'], $form_state['values']['nid']);

  
  form_set_value($form['field_a_teaser'], array('und' => array(0 => array('value' => $teaser_data['teaser'], 'format' => 'full_html') )), $form_state);
  form_set_value($form['field_main_image'], array('und' => array(0 => array('value' => serialize($teaser_data['main_image']), 'format' => 'full_html') )), $form_state);
  
  
  $extra_data = array(
    'title' => $form_state['values']['title'], 
    'teaser_block' => $teaser_data['teaser_block'], 
    'teaser_home' => $teaser_data['teaser_home'],
    'teaser_side_block' => $teaser_data['teaser_side_block'],
    'side_block_main_image' => $teaser_data['side_block_main_image'],
    'images' => $teaser_data['images'], 
  );
  
  
  if (!empty($form_state['values']['guest_author'])) {
    $extra_data['guest_author'] = $form_state['values']['guest_author'];
  }
  
  form_set_value($form['field_extra_data'], array('und' => array(0 => array('value' => serialize($extra_data), 'format' => 'full_html') )), $form_state);
  
}


/**
 * Custom validate of article type form.
 *
 * @param array &$form
 *   Array with declared form.
 *
 * @param array &$form_state
 *   Array with current form state.

 * @return void
 *   Return nothing.
 */
function may_pages_submitForm_saveDraft(&$form, &$form_state) {

  if ($form_state['values']['op'] == 'Save' && @$form_state['build_info']['args'][0]->status == 0) {
    // NOT publish ---> Publish
    drupal_set_message('NOT publish ---> Publish', 'warning');

    $form_state['values']['status'] = 1;
    drupal_set_message(t('This article is now published!'), 'warning');
    $status_changed = TRUE;
  }
  elseif (($form_state['values']['op'] == 'Save Draft' ||  $form_state['values']['status'] == 0) && @$form_state['build_info']['args'][0]->status == 1) {
    // Publish ---> NOT publish
    drupal_set_message('Publish ---> NOT publish', 'warning');

    $form_state['values']['status'] = 0;
    drupal_set_message(t('Attention! This article is saved as draft and is not published now!'), 'warning');
    $status_changed = TRUE;
  }
  elseif (!$form_state['values']['nid'] || @$form_state['build_info']['args'][0]->field_show_in_block['und'][0]['value'] != @$form_state['values']['field_show_in_block']['und'][0]['value'] || $form_state['values']['op'] == 'Delete') {
    $status_changed = TRUE;
  }
  else {
    $status_changed = FALSE;
  }
  
  //if ($status_changed) 
  {
    // Clear the views cache.
    ///////drupal_flush_all_caches(); // This would clear a Boost cache as well.
    ///////drupal_set_message('All caches has been flushed!', 'warning');
    //
    //
    //
    // So we clear here only a views caches.
//    cache_clear_all('*', 'cache_views', TRUE);
//    cache_clear_all('*', 'cache_views_data', TRUE);
//    drupal_set_message('A cache has been flushed.', 'warning');
  }

//  if ($form_state['values']['op'] == 'Save Draft') {
//    $form_state['values']['status'] = 0;
//    drupal_set_message(t('Attention! This article is saved as draft and is not published now!'), 'warning');
//      // Doesn't work
//      //form_set_value($form['options'], array('status' => array('#default_value' => 0)), $form_state);
//      //form_set_value($form['options']['status'], array('#default_value' => 0), $form_state);
//  }
//  else {
//    $form_state['values']['status'] = 1;
//  }
  
  
}


/**
 * Implements hook_node_view().
 *
 * @return void
 *   Return nothing.
 */
function may_pages_node_view($node, $view_mode) {

  switch ($node->type) {
    
    case 'preface':
      
      $preface_key = @$node->field_preface_key['und'][0]['value'];
      
      // Disable ?page* links for /sitemap.
      if (@$_SERVER['REDIRECT_URL'] == '/sitemap' && $_SERVER['REQUEST_URI'] != '/sitemap') {
        //drupal_not_found();
        may_misc_drupal_not_found();
        drupal_exit();
      }
      
      
      
      // Set metatags from the preface to a page where the preface is placed
      // Except of the front page, where it can be set via admin interface of the Metatags.
      // AND except of published prefaces, because thier metatags will be pulled automatically!

      if (isset($node->metatags) && count($node->metatags) && !$node->status) {
        
        foreach($node->metatags as $metatag_title => $metatag_data) {
          may_misc_addMetatag($metatag_title, $metatag_data['value']);

        }
      }
      
    break;
  
  } // End of switch ($node->type) {
  
  if ($view_mode == 'full') {
    may_misc_addSocialShareData_toPage($node);
    
//    $types_with_floating_share = array ('article', 'blog_post', 'news_post', 'preface', 'provider', 'phone');
//    if (in_array($node->type, $types_with_floating_share)) {
//      
//        // Floating share buttons box.
//        drupal_add_js('sites/all/libraries/jquery.plugins/stickyfloat/stickyfloat2.js');
//        $module_path = drupal_get_path('module', 'may_misc');
//        drupal_add_js( $module_path . '/js/may_floatingSocials.js'); 
//      
//      
//    }
  }
}


/**
 * Returns SH 1.
 */
function may_pages_sh1() {
  
  $out = '';
          
  $lights = array(
    'l-0' => array('title' => 'Постирочная, Точки и вент БЕЗ СЕНСОРА (BL1)'), // -------------------
    'l-1' => array('title' => 'Спальня, Неон (BL11)'), // --------------------------------
    'l-2' => array('title' => 'Коридор до спальни, Точки (BL8)'), // -----------------------
    'l-3' => array('title' => 'Кабинет, Люстра (BL7)'), // ------------------------------
    'l-4' => array('title' => 'Спальня, Подвесы (BL6)'), // ------------------------------
    'l-5' => array('title' => 'Коридор, Точки (BL5)'), // --------------------------------
    'l-6' => array('title' => 'Коридор, Подвесы (BL4)'), // ---------------------------------
    'l-7' => array('title' => 'Детская, Над столом (BL3)'), // -------------------
    'l-8' => array('title' => 'Детская, Над кроватями (BL2)'), // -------------------
    'l-9' => array('title' => 'Детская, Точки (BL12)'), // ---------------------------
    'l-10' => array('title' => 'Ванная, Люстра (BL13)'), // ---------------------------
    'l-11' => array('title' => 'Кухня, Свет из вытяжки (BL14)'), // -------------------
    'l-12' => array('title' => 'Зал, Люстра (BL15)'), // ------------------------------------
    'l-13' => array('title' => 'Кухня, Подсветка шкафов (BL16)'), // on the board L16: S-22 (3 с конца Реле 2), A8 (белый на ток сенс. 2)
    'l-14' => array('title' => 'Зал, Неон на 3д-панелях (BL18)'), // -------------------------
    'l-15' => array('title' => 'Кухня, Точки (BL17)'), // -------------------- 
    /* ------  */ 'l-16' => array('title' => '----> НЕ ПОДКЛЮЧЕНО (BL9)'), // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  сломана кнопка откл. реле.
    'l-17' => array('title' => 'Ванная, Вентилятор (BL10)'), // ------------------------------------  
  );
  
  $out .= '<a class="light" id="l-00" href=#>Kitchen wall</a>';
  
  $out .= '<a class="light" id="l-00" href=#>Kitchen wall</a>';
 
  $form['access'] = array(
    '#type' => 'fieldset',
    '#title' => 'Access',
    '#attributes' => array('class'=> array('access')),
      
  );
        $form['access']['pass'] = array(
          '#type' => 'password',
          '#title' => 'Password',
          '#value' => NULL,
          '#attributes' => array('id'=> 'pass'),
        );
  
        
        
  $flat_markup = '
    
      <div class="flat">
        <div class="part-1">
          <div class="child">Детская
            ' . may_pages_sh_renderLight($lights, 'l-9') . '
            ' . may_pages_sh_renderLight($lights, 'l-7') . '  
            ' . may_pages_sh_renderLight($lights, 'l-8') . '
          </div>
          <div class="hall">
            <div class="living">Зал
              ' . may_pages_sh_renderLight($lights, 'l-12') . '
              ' . may_pages_sh_renderLight($lights, 'l-14') . '  
            </div>
            <div class="kitchen">Кухня
              ' . may_pages_sh_renderLight($lights, 'l-15') . '
              ' . may_pages_sh_renderLight($lights, 'l-13') . '  
              ' . may_pages_sh_renderLight($lights, 'l-11') . '
            </div>
          </div>  
        </div>
        <div class="part-2">
          <div class="koridor">Коридор
            ' . may_pages_sh_renderLight($lights, 'l-5') . '
            ' . may_pages_sh_renderLight($lights, 'l-6') . '
          </div>  
          <div class="kabinet">Кабинет
            ' . may_pages_sh_renderLight($lights, 'l-3') . '
          </div>  
        </div>
        <div class="part-3">
          <div class="part-3-1">
            <div class="koridor-do-spalni">Коридор до спальни
              ' . may_pages_sh_renderLight($lights, 'l-2') . '
            </div>  
            <div class="part-3-2">
              <div class="vannaya">Ванная
                ' . may_pages_sh_renderLight($lights, 'l-10') . ' 
                ' . may_pages_sh_renderLight($lights, 'l-17') . '  
              </div>
              <div class="postirochnaya">Постирочная
                ' . may_pages_sh_renderLight($lights, 'l-0') . '
              </div>
            </div>  
          </div>
          <div class="spalnia">Спальня 
            ' . may_pages_sh_renderLight($lights, 'l-1') . '
            ' . may_pages_sh_renderLight($lights, 'l-4') . '  
          </div>
        </div>
      </div>

  ';
  
  $form['refresh-all'] = array(
    '#markup' => '<a class="refresh-all" href=#>Refresh everything</a>' . $flat_markup,
  );
  
  /*
  
  <fieldset class="light fieldset form-wrapper titled" id="l-1">
                <legend>
                  <span class="fieldset-title fieldset-legend">Спальня, неон (BL11), l-1</span>
                </legend>

                <div class="fieldset-content fieldset-wrapper clearfix" id="l-1">
                  <a class="on" href="#">On-</a><a class="off" href="#">Off-</a><a class="switch" href="#">Switch</a><div class="form-item form-type-checkbox form-disabled">
                  <input class="state form-checkbox" disabled="disabled" type="checkbox" value="1">  <label class="option">Last/current state </label>

                 <div class="description">Last refresh: <span>Never</span></div>
                </div>
                <a class="refresh" href="#">Refresh light</a><div class="wait" style="display: none;">Please, wait...</div>    </div>
            </fieldset>
   
  */
  $form['lights'] = array(
    '#type' => 'fieldset',
    '#title' => 'Lights',
    '#attributes' => array('class'=> array('lights')),
  );    
        $form['lights']['refresh-lights'] = array(
          '#markup' => '<a class="refresh-lights" href=#>Refresh all lights</a>',
        );
        
        foreach ($lights as $id => $light) {
          
            list( ,$title) = explode(', ', $light['title']);
            
            $form['lights'][$id] = array(
              '#type' => 'fieldset',
              '#title' => $title . ', ' . $id,
              '#attributes' => array('class'=> array('light'), 'id' => $id),
            );

                    $form['lights'][$id]['on'] = array(
                      '#markup' => '<a class="on" href=#>On-</a>',
                    );
                    $form['lights'][$id]['off'] = array(
                      '#markup' => '<a class="off" href=#>Off-</a>',
                    );
                    $form['lights'][$id]['switch'] = array(
                      '#markup' => '<a class="switch" href=#>Switch</a>',
                    );
                    
                    $form['lights'][$id]['state'] = array(
                      '#type' => 'checkbox',
                      '#title' => 'Last/current state',
                      '#default_value' => FALSE,
                      //'#value' => 1,  
                      '#description' => 'Last refresh: <span>Never</span>',
                      '#disabled' => TRUE,
                      '#attributes' => array('class'=> array('state'), 'disabled' => 'disabled'),
                    );
                    $form['lights'][$id]['refresh'] = array(
                      '#markup' => '<a class="refresh" href=#>Refresh light</a><div class="wait" style="display: none;">Please, wait...</div>',
                    );
                    
                    
        } // End of foreach ($lights as $id => $light) {
  
  $form['other'] = array(
    '#type' => 'fieldset',
    '#title' => 'other',
  );
  $form['other']['other-1'] = array(
    '#markup' => '<a class="light" id="l-00" href=#>Kitchen wall</a>',
  );
  
  $out = drupal_render($form);
  
  $path_to_custom_js = drupal_get_path('module', 'may_pages') . '/js/';
  drupal_add_js($path_to_custom_js . 'may_sh.js');
     
  return $out;
}


function may_pages_sh_renderLight($lights, $id) {
  
  $form = array();
  
  $form['lights'][$id] = array(
    '#type' => 'container',
    //'#title' => $lights[$id]['title'] . ', ' . $id,
    '#attributes' => array('class'=> array('light'), 'id' => $id),
  );
          $form['lights'][$id]['state_div'] = array(
            '#markup' => '<div class="state"></div>'
              . '<div class="title">' . $lights[$id]['title'] . ', ' . $id . '</div>',
          );
          $form['lights'][$id]['on'] = array(
            '#markup' => '<a class="on" href=#>On-</a>',
          );
          $form['lights'][$id]['off'] = array(
            '#markup' => '<a class="off" href=#>Off-</a>',
          );
          $form['lights'][$id]['switch'] = array(
            '#markup' => '<a class="switch" href=#>Switch-</a>',
          );
          $form['lights'][$id]['update'] = array(
            '#markup' => '<a class="refresh" href=#>Upd</a>',
          );
          $form['lights'][$id]['refresh'] = array(
            '#markup' => '<div class="description">Refreshed: <span>Never</span></div>'
              . '<div class="wait" style="display: none;">Please, wait...</div>',
          );
//          $form['lights'][$id]['state'] = array(
//            '#type' => 'checkbox',
//            '#title' => 'Last/current state',
//            '#default_value' => FALSE,
//            //'#value' => 1,  
//            '#description' => 'Last refresh: <span>Never</span>',
//            '#disabled' => TRUE,
//            '#attributes' => array('class'=> array('state'), 'disabled' => 'disabled'),
//          );
//          $form['lights'][$id]['refresh'] = array(
//            '#markup' => '<a class="refresh" href=#>Refresh</a><div class="wait" style="display: none;">Please, wait...</div>',
//          );
          
   return render($form);       
}


/**
 * Returns SH Get.
 */
function may_pages_sh_get() {
  
  $post = array();
  $p = 'xxx';
  $url = NULL;
  $status = FALSE;
  
  // MApping pairs.
  $map_main = array(
    //'First Name' => 'FirstName',
  );
  // Set initial fields.
  $data_to = array(
    //'op' => 4,
    //'lamp' => 0,
  );
  
  // Map data to remote vars names.
  foreach ($_POST as $input_key => $input_data) {
    $output_key = !empty($map_main[$input_key]) ? $post[$input_key] : $input_key;
    $post[$output_key] = check_plain(strip_tags($input_data));
  }
  
  if ($post['access'] == $p) {
      $status = TRUE;
      $url = 'http://smart1977.ddns.net';
      $data_to['access'] = $post['access'];
      
      if ($post['type'] == 'button_light') {
        
          $data_to['lamp'] = str_replace('l-', '', $post['id']);
          switch ($post['class']) {
            case 'on':
              $data_to['op'] = 3;
              break;
            case 'off':
              $data_to['op'] = 2;
              break;
            case 'switch':
              $data_to['op'] = 4;
              break;
            case 'refresh':
              $data_to['op'] = 1;
              break;
          } // End of switch ($post['class']) {
       
      } // End of if ($post['type' == 'button_light']) {
  }
  
  
  /*
  // http://100.65.21.29:88/?access=xxx&op=4&lamp=0
  // $url = 'http://smart1977.ddns.net/?access=xxx&op=4&lamp=0';
  // $url = 'http://100.65.21.29:88';
  // $url = 'http://100.65.21.29';
  
  $url = 'http://100.65.21.29/?access=xxx&op=4&lamp=0';
  
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  //curl_setopt($curl, CURLOPT_PORT, 88);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($curl, CURLOPT_TIMEOUT, 300);
  //curl_setopt($curl, CURLOPT_POST, FALSE);
  //curl_setopt($curl, CURLOPT_POSTFIELDS, $data_to);
  $data_from = curl_exec($curl);
  if ($data_from === false) {
    $data_from = 'Error!!! 
' . curl_error($curl);
  }
  curl_close($curl);
 */
  
/*  
  //$data_from = gv_misc_curlGET($url);
  $data_from = file_get_contents($url);
  
  if ($data_from) {
    $data_from = json_decode($data_from);
  }
*/
  
  drupal_json_output(array('status' => $status, 'url' =>$url, 'post' => $post, 'data' => $data_to));
}